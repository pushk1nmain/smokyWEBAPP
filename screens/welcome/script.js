/**
 * SmokyApp - Welcome Screen JavaScript
 * –°–∫—Ä–∏–ø—Ç —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram WebApp API
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let tg = null;
let isReady = false;
let config = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–ª—é—á–∏
 */
const initializeConfig = () => {
    if (typeof window === 'undefined' || !window.SmokyConfig) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SmokyConfig –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª config.js –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç window.SmokyConfig');
        throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }
    
    config = window.SmokyConfig;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!config.api?.baseUrl || !config.api?.apiKey) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò: –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API');
        throw new Error('–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
    if (config.api.apiKey === 'YOUR_API_KEY_HERE') {
        console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è placeholder –¥–ª—è API –∫–ª—é—á–∞!');
    }
    
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', {
        apiBaseUrl: config.api.baseUrl,
        hasApiKey: !!config.api.apiKey,
        debugMode: config.development?.enableDebugLogs || false
    });
    
    return config;
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp API –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
const initializeWelcomeScreen = async () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è SmokyApp...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try {
        initializeConfig();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp API
    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        tg = window.Telegram.WebApp;
        console.log('‚úÖ Telegram WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        await setupTelegramWebApp();
    } else {
        console.warn('‚ö†Ô∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        await setupBrowserMode();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞
        hideLoading();
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI –∏ —Å–æ–±—ã—Ç–∏—è
    setupUI();
    setupEventListeners();
    
    isReady = true;
    console.log('‚úÖ –≠–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è SmokyApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Telegram
 */
const setupTelegramWebApp = async () => {
    try {
        // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        tg.ready();
        console.log('üì± Telegram WebApp –≥–æ—Ç–æ–≤');
        
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        tg.expand();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        applyTelegramTheme();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Telegram
        setupTelegramButtons();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        await getUserData();
        
        console.log('üé® Telegram WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram WebApp:', error);
        hideLoading(); // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
};

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ç–µ–º–æ–π Telegram
 */
const applyTelegramTheme = () => {
    if (!tg?.themeParams) return;
    
    const theme = tg.themeParams;
    const root = document.documentElement;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
    if (theme.bg_color) {
        root.style.setProperty('--tg-theme-bg-color', theme.bg_color);
    }
    if (theme.text_color) {
        root.style.setProperty('--tg-theme-text-color', theme.text_color);
    }
    if (theme.hint_color) {
        root.style.setProperty('--tg-theme-hint-color', theme.hint_color);
    }
    if (theme.button_color) {
        root.style.setProperty('--tg-theme-button-color', theme.button_color);
    }
    if (theme.button_text_color) {
        root.style.setProperty('--tg-theme-button-text-color', theme.button_text_color);
    }
    if (theme.secondary_bg_color) {
        root.style.setProperty('--tg-theme-secondary-bg-color', theme.secondary_bg_color);
    }
    
    console.log('üé® –¢–µ–º–∞ Telegram –ø—Ä–∏–º–µ–Ω–µ–Ω–∞:', theme);
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ Telegram
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ Telegram WebApp
 */
const setupTelegramButtons = () => {
    if (!tg) return;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    tg.BackButton.hide();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É (–ø–æ–∫–∞ —Å–∫—Ä—ã–≤–∞–µ–º)
    tg.MainButton.hide();
    
    console.log('üîò –ö–Ω–æ–ø–∫–∏ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ backend API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const checkUserInAPI = async (telegramId) => {
    try {
        if (!config?.api) {
            console.error('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return { found: false, userData: null, error: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞' };
        }
        
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API: ${telegramId}`);
        
        const response = await fetch(`${config.api.baseUrl}/user/${telegramId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-API-Key': config.api.apiKey
            }
        });
        
        if (response.ok) {
            const userData = await response.json();
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ API:', userData);
            return { found: true, userData };
        } else if (response.status === 404) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API (404)');
            return { found: false, userData: null };
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', response.status, response.statusText);
            return { found: false, userData: null, error: `HTTP ${response.status}` };
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:', error);
        return { found: false, userData: null, error: error.message };
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ API
 */
const getUserData = async () => {
    if (!tg?.initDataUnsafe) return null;
    
    const user = tg.initDataUnsafe.user;
    if (user) {
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram:', {
            id: user.id,
            firstName: user.first_name,
            lastName: user.last_name,
            username: user.username,
            languageCode: user.language_code
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingWithText('–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API
        const apiResult = await checkUserInAPI(user.id);
        
        // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ API
        await personalizeGreeting(user, apiResult);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        hideLoading();
        
        return { telegramUser: user, apiResult };
    }
    
    return null;
};

/**
 * –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ API –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ Telegram
 */
const personalizeGreeting = async (telegramUser, apiResult) => {
    const titleElement = document.querySelector('.welcome-title');
    if (!titleElement) return;
    
    let userName = '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ API
    if (apiResult.found && apiResult.userData?.name) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –ë–î
        userName = apiResult.userData.name;
        console.log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –ë–î: ${userName}`);
    } else if (telegramUser?.first_name) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ Telegram
        userName = telegramUser.first_name;
        console.log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ Telegram: ${userName}`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if (userName) {
        titleElement.textContent = `–ü—Ä–∏–≤–µ—Ç, ${userName}! –Ø –°–º–æ–∫–∏ ‚Äî –≤–∞—à —Ä–æ–±–æ—Ç-–¥—Ä—É–≥ –Ω–∞ –ø—É—Ç–∏ –∫ –∂–∏–∑–Ω–∏ –±–µ–∑ —Å–∏–≥–∞—Ä–µ—Ç`;
        console.log(`üëã –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è: ${userName}`);
    } else {
        // Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        titleElement.textContent = '–ü—Ä–∏–≤–µ—Ç! –Ø –°–º–æ–∫–∏ ‚Äî –≤–∞—à —Ä–æ–±–æ—Ç-–¥—Ä—É–≥ –Ω–∞ –ø—É—Ç–∏ –∫ –∂–∏–∑–Ω–∏ –±–µ–∑ —Å–∏–≥–∞—Ä–µ—Ç';
        console.log('üëã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ');
    }
};

/**
 * –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
const setupBrowserMode = async () => {
    console.log('üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ç–µ–º—É
    const root = document.documentElement;
    root.style.setProperty('--tg-theme-bg-color', '#ffffff');
    root.style.setProperty('--tg-theme-text-color', '#000000');
    root.style.setProperty('--tg-theme-hint-color', '#999999');
    root.style.setProperty('--tg-theme-button-color', '#2196F3');
    root.style.setProperty('--tg-theme-button-text-color', '#ffffff');
    root.style.setProperty('--tg-theme-secondary-bg-color', '#f1f1f1');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    const testUser = config?.development?.testUser || {
        id: 123456789,
        first_name: '–¢–µ—Å—Ç',
        last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        username: 'testuser',
        language_code: 'ru'
    };
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingWithText('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
    const apiResult = await checkUserInAPI(testUser.id);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await personalizeGreeting(testUser, apiResult);
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */
const setupUI = () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const viewport = document.querySelector('meta[name="viewport"]');
    if (viewport) {
        viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover');
    }
    
    console.log('üé® UI –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
const setupEventListeners = () => {
    const startButton = document.getElementById('startButton');
    
    if (startButton) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        startButton.addEventListener('click', handleStartClick);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        startButton.addEventListener('keydown', handleStartKeyDown);
        
        console.log('‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–∫—Ä–∞–Ω—É
 */
const handleStartClick = () => {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É—Ç—å —Å –°–º–æ–∫–∏!');
    
    // Haptic feedback –¥–ª—è Telegram
    if (tg?.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('medium');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SmokyApp! üéâ');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setTimeout(() => {
        navigateToNextScreen();
    }, 1500);
};

/**
 * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–∫—Ä–∞–Ω—É
 * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
const navigateToNextScreen = () => {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram –±–æ—Ç –æ –Ω–∞—á–∞–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (tg?.sendData) {
        try {
            tg.sendData(JSON.stringify({
                type: 'welcome_completed',
                action: 'start_journey',
                timestamp: new Date().toISOString(),
                user_data: getUserData()
            }));
            console.log('üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –±–æ—Ç');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
    
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    showNotification('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É... üõ†Ô∏è');
    
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    setTimeout(() => {
        showNotification('–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üì±');
    }, 2000);
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
 */
const handleStartKeyDown = (event) => {
    if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        handleStartClick();
    }
};

/**
 * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
const showNotification = (message) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if (tg?.showAlert) {
        tg.showAlert(message);
    } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        alert(message);
    }
    
    console.log('üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', message);
};

/**
 * –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
 */
const showLoadingWithText = (text) => {
    const loadingOverlay = document.getElementById('loadingOverlay');
    const loadingText = document.querySelector('.loading-text');
    
    if (loadingOverlay) {
        loadingOverlay.classList.remove('hidden');
        console.log(`‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É: ${text}`);
    }
    
    if (loadingText) {
        loadingText.textContent = text;
    }
};

/**
 * –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
 * –£–±–∏—Ä–∞–µ—Ç —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
const hideLoading = () => {
    const loadingOverlay = document.getElementById('loadingOverlay');
    if (loadingOverlay) {
        setTimeout(() => {
            loadingOverlay.classList.add('hidden');
            console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä—ã—Ç–∞');
        }, 500);
    }
};

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
const handleError = (error, context = 'Unknown') => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${context}:`, error);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ Telegram –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if (tg?.sendData) {
        try {
            tg.sendData(JSON.stringify({
                type: 'error',
                screen: 'welcome',
                context: context,
                error: error.message,
                timestamp: new Date().toISOString()
            }));
        } catch (sendError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram:', sendError);
        }
    }
};

/**
 * –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
 * –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */
const logDebugInfo = () => {
    console.log('üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è Welcome Screen:');
    console.log('- User Agent:', navigator.userAgent);
    console.log('- Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.Telegram?.WebApp);
    console.log('- –í–µ—Ä—Å–∏—è WebApp:', tg?.version || 'N/A');
    console.log('- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', tg?.platform || 'Unknown');
    console.log('- –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', tg?.initData || 'N/A');
    console.log('- –≠–∫—Ä–∞–Ω:', 'Welcome');
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    handleError(event.error, 'Global Error');
});

window.addEventListener('unhandledrejection', (event) => {
    handleError(event.reason, 'Unhandled Promise Rejection');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è...');
    
    // –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logDebugInfo();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    await initializeWelcomeScreen();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.SmokyWelcome = {
    isReady: () => isReady,
    getTelegram: () => tg,
    getUserData: getUserData,
    showNotification: showNotification,
    navigateToNextScreen: navigateToNextScreen
};

/* ============================================
   –í–°–¢–†–û–ï–ù–ù–ê–Ø –ö–û–ù–°–û–õ–¨ –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê
   ============================================ */

/**
 * –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Telegram WebApp
 * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ console –º–µ—Ç–æ–¥—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö –≤ UI
 */
class DevConsole {
    constructor() {
        this.logs = [];
        this.maxLogs = 500;
        this.isCollapsed = false;
        this.isHidden = false;
        this.activeFilter = 'all';
        this.startTime = Date.now();
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
        this.consoleElement = null;
        this.contentElement = null;
        this.countElement = null;
        this.filtersElement = null;
        
        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã console
        this.originalConsole = {
            log: console.log,
            info: console.info,
            warn: console.warn,
            error: console.error,
            debug: console.debug,
            trace: console.trace,
            table: console.table,
            group: console.group,
            groupEnd: console.groupEnd
        };
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
     */
    init() {
        this.findDOMElements();
        this.setupEventListeners();
        this.interceptConsoleMethods();
        this.logToConsole('info', 'üîß –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        this.show();
    }
    
    /**
     * –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
     */
    findDOMElements() {
        this.consoleElement = document.getElementById('devConsole');
        this.contentElement = document.getElementById('consoleContent');
        this.countElement = document.getElementById('logCount');
        this.filtersElement = document.getElementById('consoleFilters');
        
        if (!this.consoleElement) {
            console.error('‚ùå DevConsole: –≠–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Å–æ–ª–∏
        const toggleBtn = document.getElementById('consoleToggle');
        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => this.toggle());
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
        const clearBtn = document.getElementById('clearLogs');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => this.clear());
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filterToggleBtn = document.getElementById('filterToggle');
        if (filterToggleBtn) {
            filterToggleBtn.addEventListener('click', () => this.toggleFilters());
        }
        
        // –§–∏–ª—å—Ç—Ä—ã –ª–æ–≥–æ–≤
        const filterBtns = document.querySelectorAll('.filter-btn');
        filterBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const filter = btn.dataset.filter;
                this.setFilter(filter);
            });
        });
        
        // –ö–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        const header = document.querySelector('.dev-console-header');
        if (header) {
            header.addEventListener('click', (e) => {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º
                if (!e.target.closest('.dev-console-btn')) {
                    this.toggleCollapse();
                }
            });
        }
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–≤–∞—Ç –º–µ—Ç–æ–¥–æ–≤ console
     */
    interceptConsoleMethods() {
        const self = this;
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã console
        console.log = function(...args) {
            self.originalConsole.log.apply(console, args);
            self.logToConsole('log', ...args);
        };
        
        console.info = function(...args) {
            self.originalConsole.info.apply(console, args);
            self.logToConsole('info', ...args);
        };
        
        console.warn = function(...args) {
            self.originalConsole.warn.apply(console, args);
            self.logToConsole('warn', ...args);
        };
        
        console.error = function(...args) {
            self.originalConsole.error.apply(console, args);
            self.logToConsole('error', ...args);
        };
        
        console.debug = function(...args) {
            self.originalConsole.debug.apply(console, args);
            self.logToConsole('debug', ...args);
        };
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
            const url = args[0];
            const options = args[1] || {};
            
            self.logToConsole('api', `üåê API –ó–∞–ø—Ä–æ—Å: ${options.method || 'GET'} ${url}`);
            
            return originalFetch.apply(this, args)
                .then(response => {
                    const status = response.status;
                    const statusText = response.statusText;
                    const logType = status >= 400 ? 'error' : status >= 300 ? 'warn' : 'api';
                    
                    self.logToConsole(logType, `üåê API –û—Ç–≤–µ—Ç: ${status} ${statusText} - ${url}`);
                    return response;
                })
                .catch(error => {
                    self.logToConsole('error', `üåê API –û—à–∏–±–∫–∞: ${error.message} - ${url}`);
                    throw error;
                });
        };
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
        window.addEventListener('error', (event) => {
            self.logToConsole('error', `üí• JavaScript –û—à–∏–±–∫–∞: ${event.message}`, event.filename, `–°—Ç—Ä–æ–∫–∞: ${event.lineno}`);
        });
        
        window.addEventListener('unhandledrejection', (event) => {
            self.logToConsole('error', `üö´ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Promise: ${event.reason}`);
        });
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
     */
    logToConsole(type, ...args) {
        const timestamp = this.getTimestamp();
        const message = this.formatMessage(args);
        
        const logEntry = {
            type,
            timestamp,
            message,
            raw: args
        };
        
        this.logs.push(logEntry);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
        if (this.logs.length > this.maxLogs) {
            this.logs.shift();
        }
        
        this.renderLog(logEntry);
        this.updateLogCount();
        this.scrollToBottom();
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    formatMessage(args) {
        return args.map(arg => {
            if (typeof arg === 'object') {
                try {
                    return JSON.stringify(arg, null, 2);
                } catch (e) {
                    return String(arg);
                }
            }
            return String(arg);
        }).join(' ');
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
     */
    getTimestamp() {
        const now = new Date();
        const elapsed = now.getTime() - this.startTime;
        const seconds = Math.floor(elapsed / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        
        const h = String(hours).padStart(2, '0');
        const m = String(minutes % 60).padStart(2, '0');
        const s = String(seconds % 60).padStart(2, '0');
        
        return `${h}:${m}:${s}`;
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–æ–≥–∞
     */
    renderLog(logEntry) {
        if (!this.contentElement) return;
        
        const logElement = document.createElement('div');
        logElement.className = `dev-console-log ${logEntry.type} new`;
        logElement.dataset.type = logEntry.type;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É
        const icons = {
            log: 'üìù',
            info: '‚ÑπÔ∏è',
            warn: '‚ö†Ô∏è',
            error: '‚ùå',
            debug: 'üêõ',
            api: 'üåê'
        };
        
        logElement.innerHTML = `
            <span class="log-time">${logEntry.timestamp}</span>
            <span class="log-type">${icons[logEntry.type] || 'üìù'}</span>
            <span class="log-message ${logEntry.type}">${this.escapeHtml(logEntry.message)}</span>
        `;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
        if (logEntry.raw.some(arg => typeof arg === 'object' && arg !== null)) {
            const objectsDiv = document.createElement('div');
            objectsDiv.className = 'log-object';
            
            const objects = logEntry.raw.filter(arg => typeof arg === 'object' && arg !== null);
            objects.forEach(obj => {
                const pre = document.createElement('pre');
                try {
                    pre.textContent = JSON.stringify(obj, null, 2);
                } catch (e) {
                    pre.textContent = String(obj);
                }
                objectsDiv.appendChild(pre);
            });
            
            logElement.appendChild(objectsDiv);
        }
        
        this.contentElement.appendChild(logElement);
        
        // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            logElement.classList.remove('new');
        }, 300);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
        this.applyFilter();
    }
    
    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ª–æ–≥–æ–≤
     */
    updateLogCount() {
        if (this.countElement) {
            this.countElement.textContent = this.logs.length;
        }
    }
    
    /**
     * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤ –∫–æ–Ω–µ—Ü
     */
    scrollToBottom() {
        if (this.contentElement && !this.isCollapsed) {
            setTimeout(() => {
                this.contentElement.scrollTop = this.contentElement.scrollHeight;
            }, 50);
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    setFilter(filter) {
        this.activeFilter = filter;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filterBtns = document.querySelectorAll('.filter-btn');
        filterBtns.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.filter === filter);
        });
        
        this.applyFilter();
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    applyFilter() {
        if (!this.contentElement) return;
        
        const logs = this.contentElement.querySelectorAll('.dev-console-log:not(.startup)');
        logs.forEach(log => {
            const logType = log.dataset.type;
            const shouldShow = this.activeFilter === 'all' || logType === this.activeFilter;
            log.classList.toggle('hidden', !shouldShow);
        });
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    toggleFilters() {
        if (this.filtersElement) {
            this.filtersElement.classList.toggle('hidden');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å
     */
    show() {
        if (this.consoleElement) {
            this.consoleElement.classList.remove('hidden');
            this.isHidden = false;
        }
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å
     */
    hide() {
        if (this.consoleElement) {
            this.consoleElement.classList.add('hidden');
            this.isHidden = true;
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Å–æ–ª–∏
     */
    toggle() {
        if (this.isHidden) {
            this.show();
        } else {
            this.hide();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
        const toggleBtn = document.getElementById('consoleToggle');
        if (toggleBtn) {
            toggleBtn.textContent = this.isHidden ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è';
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏
     */
    toggleCollapse() {
        if (this.consoleElement) {
            this.consoleElement.classList.toggle('collapsed');
            this.isCollapsed = !this.isCollapsed;
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
     */
    clear() {
        this.logs = [];
        if (this.contentElement) {
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const startupLogs = this.contentElement.querySelectorAll('.startup');
            this.contentElement.innerHTML = '';
            startupLogs.forEach(log => this.contentElement.appendChild(log));
        }
        this.updateLogCount();
        this.logToConsole('info', 'üßπ –ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞');
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ console
     */
    restore() {
        Object.keys(this.originalConsole).forEach(method => {
            console[method] = this.originalConsole[method];
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    setTimeout(() => {
        if (typeof window !== 'undefined') {
            window.devConsole = new DevConsole();
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram WebApp
            if (window.Telegram?.WebApp) {
                console.info('üì± Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω:', {
                    version: window.Telegram.WebApp.version,
                    platform: window.Telegram.WebApp.platform,
                    colorScheme: window.Telegram.WebApp.colorScheme,
                    isExpanded: window.Telegram.WebApp.isExpanded
                });
            } else {
                console.warn('‚ö†Ô∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞');
            }
        }
    }, 100);
});
