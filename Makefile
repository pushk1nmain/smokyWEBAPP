# Makefile –¥–ª—è SmokyApp - Telegram Web App
# –£–ø—Ä–æ—â–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ –∏ –¥–µ–ø–ª–æ–µ–º

.PHONY: help install build start stop restart logs status clean update deploy backup restore test lint

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
COMPOSE_FILE := docker-compose.yml
PROJECT_NAME := smokyapp
BACKUP_DIR := ./backups
LOG_DIR := ./logs

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
BLUE := \033[0;34m
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(BLUE)SmokyApp - Telegram Web App$(NC)"
	@echo "$(BLUE)==============================$(NC)"
	@echo ""
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:"
	@echo "  $(YELLOW)make install$(NC)  - –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
	@echo "  $(YELLOW)make start$(NC)    - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
	@echo "  $(YELLOW)make logs$(NC)     - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
	@echo "  $(YELLOW)make update$(NC)   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"

install: ## –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
	@echo "$(BLUE)üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SmokyApp...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞...$(NC)"; \
		cp .env.example .env; \
		echo "$(RED)‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!$(NC)"; \
	fi
	@mkdir -p $(BACKUP_DIR) $(LOG_DIR)
	@chmod +x scripts/*.sh
	@echo "$(GREEN)‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

build: ## –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
	@echo "$(BLUE)üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) build --no-cache
	@echo "$(GREEN)‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

start: ## –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(BLUE)‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ SmokyApp...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ$(NC)"
	@make status

stop: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(BLUE)‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SmokyApp...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ$(NC)"

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ SmokyApp...$(NC)"
	@make stop
	@sleep 2
	@make start

logs: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(BLUE)üìã –õ–æ–≥–∏ SmokyApp:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) logs -f --tail=50

logs-app: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@docker-compose -f $(COMPOSE_FILE) logs -f smokyapp

logs-updater: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–ª—É–∂–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	@docker-compose -f $(COMPOSE_FILE) logs -f updater

logs-nginx: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ nginx
	@docker exec smokyapp-web tail -f /var/log/nginx/access.log

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å SmokyApp:$(NC)"
	@echo ""
	@echo "$(YELLOW)Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "$(YELLOW)–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:$(NC)"
	@docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
	@echo ""
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:$(NC)"
	@curl -s -o /dev/null -w "HTTP Status: %{http_code} | Response Time: %{time_total}s\n" http://localhost/health || echo "$(RED)‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ$(NC)"

clean: ## –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ Docker
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤...$(NC)"
	@docker system prune -f
	@docker volume prune -f
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

clean-all: ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–∑—ã
	@echo "$(BLUE)üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down -v --rmi all
	@docker system prune -a -f
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

update: ## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å GitHub
	@echo "$(BLUE)üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SmokyApp...$(NC)"
	@./scripts/update.sh
	@echo "$(GREEN)‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"

update-force: ## –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	@echo "$(BLUE)üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SmokyApp...$(NC)"
	@./scripts/update.sh --force
	@echo "$(GREEN)‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"

deploy: ## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
	@echo "$(BLUE)üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ SmokyApp...$(NC)"
	@sudo ./scripts/deploy.sh
	@echo "$(GREEN)‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"

backup: ## –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
	@echo "$(BLUE)üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...$(NC)"
	@mkdir -p $(BACKUP_DIR)
	@BACKUP_NAME="backup_$(shell date +%Y%m%d_%H%M%S)"; \
	tar -czf $(BACKUP_DIR)/$$BACKUP_NAME.tar.gz \
		--exclude='logs/*' \
		--exclude='backups/*' \
		--exclude='.git/*' \
		--exclude='node_modules/*' \
		. && \
	echo "$(GREEN)‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $(BACKUP_DIR)/$$BACKUP_NAME.tar.gz$(NC)"

backup-list: ## –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
	@echo "$(BLUE)üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:$(NC)"
	@ls -la $(BACKUP_DIR)/*.tar.gz 2>/dev/null || echo "$(YELLOW)–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"

restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make restore BACKUP=backup_name.tar.gz)
	@if [ -z "$(BACKUP)" ]; then \
		echo "$(RED)‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: make restore BACKUP=backup_name.tar.gz$(NC)"; \
		make backup-list; \
		exit 1; \
	fi
	@echo "$(BLUE)üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ $(BACKUP)...$(NC)"
	@make stop
	@tar -xzf $(BACKUP_DIR)/$(BACKUP) -C .
	@make start
	@echo "$(GREEN)‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"

test: ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
	@curl -f http://localhost/health && echo "$(GREEN)‚úÖ Health check passed$(NC)" || echo "$(RED)‚ùå Health check failed$(NC)"

lint: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...$(NC)"
	@# –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile
	@command -v hadolint >/dev/null 2>&1 && hadolint Dockerfile || echo "$(YELLOW)‚ö†Ô∏è  hadolint –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"
	@# –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml
	@docker-compose -f $(COMPOSE_FILE) config >/dev/null && echo "$(GREEN)‚úÖ docker-compose.yml –≤–∞–ª–∏–¥–µ–Ω$(NC)" || echo "$(RED)‚ùå –û—à–∏–±–∫–∞ –≤ docker-compose.yml$(NC)"
	@# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ bash
	@command -v shellcheck >/dev/null 2>&1 && find scripts -name "*.sh" -exec shellcheck {} \; || echo "$(YELLOW)‚ö†Ô∏è  shellcheck –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"

watch-start: ## –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	@echo "$(BLUE)üëÅÔ∏è  –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...$(NC)"
	@./scripts/watch.sh start

watch-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	@echo "$(BLUE)‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...$(NC)"
	@./scripts/watch.sh stop

watch-status: ## –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	@./scripts/watch.sh status

watch-logs: ## –õ–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	@./scripts/watch.sh logs

shell: ## –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@docker exec -it smokyapp-web /bin/sh

shell-updater: ## –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	@docker exec -it smokyapp-updater /bin/sh

ps: ## –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
	@echo "$(BLUE)üìã –ü—Ä–æ—Ü–µ—Å—Å—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec smokyapp ps aux

env-check: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "$(BLUE)üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:$(NC)"
	@if [ -f .env ]; then \
		echo "$(GREEN)‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω$(NC)"; \
		grep -v '^#' .env | grep -v '^$$' | head -10; \
	else \
		echo "$(RED)‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		echo "$(YELLOW)–í—ã–ø–æ–ª–Ω–∏—Ç–µ: make install$(NC)"; \
	fi

ports: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã
	@echo "$(BLUE)üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps --format "table {{.Service}}\t{{.Ports}}"

size: ## –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–æ–≤ Docker
	@echo "$(BLUE)üìè –†–∞–∑–º–µ—Ä Docker –æ–±—Ä–∞–∑–æ–≤:$(NC)"
	@docker images | grep smokyapp

network: ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏ Docker
	@echo "$(BLUE)üåê –°–µ—Ç—å Docker:$(NC)"
	@docker network ls | grep smokyapp

health: ## –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
	@echo "$(BLUE)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:$(NC)"
	@echo ""
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:$(NC)"
	@curl -s -w "Status: %{http_code} | Time: %{time_total}s | Size: %{size_download} bytes\n" http://localhost/ -o /dev/null
	@echo ""
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint'–æ–≤:$(NC)"
	@curl -s -w "Health: %{http_code}\n" http://localhost/health -o /dev/null
	@echo ""
	@echo "$(YELLOW)–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:$(NC)"
	@df -h . | tail -1
	@echo ""
	@echo "$(YELLOW)–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ Docker:$(NC)"
	@docker system df

# –ê–ª–∏–∞—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
up: start ## –ê–ª–∏–∞—Å –¥–ª—è start
down: stop ## –ê–ª–∏–∞—Å –¥–ª—è stop
rebuild: build start ## –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
