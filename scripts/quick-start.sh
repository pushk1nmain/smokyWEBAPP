#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ SmokyApp
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
# –ê–≤—Ç–æ—Ä: SmokyApp Team
# –í–µ—Ä—Å–∏—è: 1.0.0

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# ASCII –∞—Ä—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
show_banner() {
    echo -e "${PURPLE}"
    cat << 'EOF'
   _____ __  __  ____  _  ____     __ ___    ____  ____ 
  / ___//  |/  |/ __ \| |/ /\ \   / /|__ \  / __ \/ __ \
  \__ \| | | | / / | |   /  \ \_/ /  __/ / / / / / / / /
 ___/ /| | | |/ /_/ /|   |   \   /  / __/_/ /_/ / /_/ / 
/____/ |_| |_|\____/ |_|_|    \_/  /____(_)____/\____/  
                                                        
    üöÄ Telegram Web App –¥–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è üöÄ
EOF
    echo -e "${NC}"
    echo -e "${CYAN}======================================================${NC}"
    echo -e "${WHITE}         –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞${NC}"
    echo -e "${CYAN}======================================================${NC}"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
show_step() {
    local step="$1"
    local total="$2"
    local description="$3"
    echo -e "${BLUE}[${step}/${total}]${NC} ${description}..."
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—Ö–∞
show_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
show_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
check_os() {
    show_step 1 8 "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
        show_success "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Linux —Å–∏—Å—Ç–µ–º–∞"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
        show_success "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ macOS —Å–∏—Å—Ç–µ–º–∞"
    else
        show_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OSTYPE"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    show_step 2 8 "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    local deps_missing=()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if ! command -v docker &> /dev/null; then
        deps_missing+=("docker")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        deps_missing+=("docker-compose")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Git
    if ! command -v git &> /dev/null; then
        deps_missing+=("git")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º curl
    if ! command -v curl &> /dev/null; then
        deps_missing+=("curl")
    fi
    
    if [[ ${#deps_missing[@]} -eq 0 ]]; then
        show_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        return 0
    fi
    
    show_warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${deps_missing[*]}"
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if [[ "$OS" == "linux" ]]; then
        install_deps_linux "${deps_missing[@]}"
    elif [[ "$OS" == "macos" ]]; then
        install_deps_macos "${deps_missing[@]}"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Linux
install_deps_linux() {
    local deps=("$@")
    
    show_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Linux..."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤
    if command -v apt &> /dev/null; then
        # Ubuntu/Debian
        sudo apt update
        for dep in "${deps[@]}"; do
            case "$dep" in
                "docker")
                    curl -fsSL https://get.docker.com | sh
                    sudo usermod -aG docker "$USER"
                    ;;
                "docker-compose")
                    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                    sudo chmod +x /usr/local/bin/docker-compose
                    ;;
                "git"|"curl")
                    sudo apt install -y "$dep"
                    ;;
            esac
        done
    elif command -v yum &> /dev/null; then
        # CentOS/RHEL
        for dep in "${deps[@]}"; do
            case "$dep" in
                "docker")
                    curl -fsSL https://get.docker.com | sh
                    sudo usermod -aG docker "$USER"
                    sudo systemctl enable --now docker
                    ;;
                "docker-compose")
                    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                    sudo chmod +x /usr/local/bin/docker-compose
                    ;;
                "git"|"curl")
                    sudo yum install -y "$dep"
                    ;;
            esac
        done
    fi
    
    show_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è macOS
install_deps_macos() {
    local deps=("$@")
    
    show_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è macOS..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Homebrew
    if ! command -v brew &> /dev/null; then
        show_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    
    for dep in "${deps[@]}"; do
        case "$dep" in
            "docker")
                show_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Desktop –¥–ª—è macOS..."
                brew install --cask docker
                ;;
            "docker-compose")
                brew install docker-compose
                ;;
            "git"|"curl")
                brew install "$dep"
                ;;
        esac
    done
    
    show_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
setup_directory() {
    show_step 3 8 "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    
    # –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if [[ -f "package.json" && -f "index.html" ]]; then
        show_success "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
        return 0
    fi
    
    # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    local project_dir="$HOME/smokyapp"
    
    if [[ -d "$project_dir" ]]; then
        show_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $project_dir —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        read -p "–£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -rf "$project_dir"
            show_success "–°—Ç–∞—Ä–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞"
        else
            show_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            exit 1
        fi
    fi
    
    mkdir -p "$project_dir"
    cd "$project_dir"
    show_success "–°–æ–∑–¥–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $project_dir"
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
clone_repository() {
    show_step 4 8 "–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞"
    
    local repo_url="${REPO_URL:-https://github.com/smokyapp/webapp.git}"
    local branch="${BRANCH:-main}"
    
    # –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    if [[ -f "package.json" && -f "index.html" ]]; then
        show_success "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    fi
    
    git clone --branch "$branch" "$repo_url" .
    show_success "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    show_step 5 8 "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    
    if [[ ! -f ".env" ]]; then
        cp .env.example .env
        show_success "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env"
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        echo ""
        show_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:"
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        read -p "ü§ñ Telegram Bot Token (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): " telegram_token
        if [[ -n "$telegram_token" ]]; then
            sed -i.bak "s/# TELEGRAM_BOT_TOKEN=.*/TELEGRAM_BOT_TOKEN=$telegram_token/" .env
        fi
        
        read -p "üí¨ Telegram Chat ID (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): " telegram_chat
        if [[ -n "$telegram_chat" ]]; then
            sed -i.bak "s/# TELEGRAM_CHAT_ID=.*/TELEGRAM_CHAT_ID=$telegram_chat/" .env
        fi
        
        # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        local secret_key=$(openssl rand -hex 32 2>/dev/null || date +%s | sha256sum | head -c 64)
        sed -i.bak "s/WEBHOOK_SECRET=.*/WEBHOOK_SECRET=$secret_key/" .env
        
        rm -f .env.bak
        show_success "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    else
        show_success "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    show_step 6 8 "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
    
    mkdir -p logs backups
    chmod +x scripts/*.sh
    show_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
build_and_start() {
    show_step 7 8 "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω
    if ! docker info &> /dev/null; then
        show_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
        exit 1
    fi
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
    show_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    show_info "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose up -d
    
    show_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
health_check() {
    show_step 8 8 "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
    
    show_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    local max_attempts=30
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        if curl -f -s http://localhost/health > /dev/null 2>&1; then
            show_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
            return 0
        fi
        
        printf "."
        sleep 2
        ((attempt++))
    done
    
    echo ""
    show_error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"
    show_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs"
    return 1
}

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_final_info() {
    echo ""
    echo -e "${GREEN}üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo ""
    echo -e "${WHITE}–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:${NC}"
    echo -e "${CYAN}üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ:${NC} http://localhost"
    echo -e "${CYAN}üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:${NC} http://localhost/health"
    echo -e "${CYAN}üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞:${NC} $(pwd)"
    echo ""
    echo -e "${WHITE}–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º:${NC}"
    echo -e "${YELLOW}  make start${NC}      - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo -e "${YELLOW}  make stop${NC}       - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo -e "${YELLOW}  make logs${NC}       - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo -e "${YELLOW}  make status${NC}     - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
    echo -e "${YELLOW}  make update${NC}     - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo -e "${YELLOW}  make help${NC}       - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º"
    echo ""
    echo -e "${WHITE}–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:${NC}"
    echo -e "${YELLOW}  ./scripts/watch.sh start${NC}   - –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
    echo -e "${YELLOW}  ./scripts/watch.sh status${NC}  - –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    echo ""
    echo -e "${WHITE}–õ–æ–≥–∏ –∏ –æ—Ç–ª–∞–¥–∫–∞:${NC}"
    echo -e "${YELLOW}  docker-compose logs -f${NC}     - –í—Å–µ –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo -e "${YELLOW}  docker-compose ps${NC}          - –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo ""
    
    if [[ -n "${TELEGRAM_BOT_TOKEN:-}" ]]; then
        echo -e "${GREEN}‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã${NC}"
        echo -e "${CYAN}   –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª${NC}"
    fi
    
    echo ""
    echo -e "${PURPLE}–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SmokyApp! üö≠üí™${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
handle_error() {
    echo ""
    show_error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo ""
    echo -e "${WHITE}–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:${NC}"
    echo -e "${YELLOW}1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω: docker info${NC}"
    echo -e "${YELLOW}2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É: curl -I google.com${NC}"
    echo -e "${YELLOW}3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏${NC}"
    echo ""
    echo -e "${WHITE}–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–º–æ—â–∏:${NC}"
    echo -e "${CYAN}üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README-DOCKER.md${NC}"
    echo -e "${CYAN}üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ: https://github.com/smokyapp/webapp/issues${NC}"
    
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "–°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ SmokyApp"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -h, --help     –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    echo "  --no-docker    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker"
    echo "  --dev          –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo ""
    echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
    echo "  REPO_URL       URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://github.com/smokyapp/webapp.git)"
    echo "  BRANCH         –í–µ—Ç–∫–∞ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: main)"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            --no-docker)
                SKIP_DOCKER=true
                shift
                ;;
            --dev)
                DEV_MODE=true
                shift
                ;;
            *)
                show_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    trap handle_error ERR
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
    show_banner
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ—à–∞–≥–æ–≤–æ
    check_os
    
    if [[ "${SKIP_DOCKER:-false}" != "true" ]]; then
        install_dependencies
    fi
    
    setup_directory
    clone_repository
    setup_environment
    create_directories
    build_and_start
    
    if health_check; then
        show_final_info
    else
        handle_error
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
