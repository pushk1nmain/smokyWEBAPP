/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è SmokyApp
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Telegram WebApp
 */

/**
 * –ö–ª–∞—Å—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class SmokyApp {
  constructor() {
    this.isInitialized = false;
    this.version = '1.0.0';
    this.debug = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  async initialize() {
    try {
      if (this.debug) {
        console.log(`SmokyApp v${this.version} - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞`);
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      Utils.toggleLoading(true, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      this.checkBrowserSupport();

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
      if (document.readyState === 'loading') {
        await new Promise(resolve => {
          document.addEventListener('DOMContentLoaded', resolve);
        });
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
      await this.initializeTelegram();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
      await this.initializeRouter();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.setupGlobalHandlers();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å
      this.setupResponsiveness();

      this.isInitialized = true;

      if (this.debug) {
        console.log('SmokyApp - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      }

    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      this.handleCriticalError(error);
    } finally {
      Utils.toggleLoading(false);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
   */
  checkBrowserSupport() {
    const requiredFeatures = [
      'fetch',
      'Promise',
      'localStorage',
      'addEventListener'
    ];

    const missingFeatures = requiredFeatures.filter(feature => {
      return typeof window[feature] === 'undefined';
    });

    if (missingFeatures.length > 0) {
      throw new Error(`–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: ${missingFeatures.join(', ')}`);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
   * @returns {Promise<void>}
   */
  async initializeTelegram() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
    console.log('   - TelegramManager –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.TelegramManager);
    console.log('   - initialize –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof window.TelegramManager?.initialize);
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å—Ä–∞–∑—É –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock
    if (this.debug) {
      console.warn('üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
      this.setupDevelopmentMode();
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å TelegramManager
    if (!window.TelegramManager || typeof TelegramManager.initialize !== 'function') {
      throw new Error('TelegramManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    try {
      const telegramInitialized = await TelegramManager.initialize();
      
      if (!telegramInitialized) {
        throw new Error('Telegram WebApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
      
      console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   */
  setupDevelopmentMode() {
    console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ mock Telegram WebApp');
    
    // –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ Telegram WebApp
    window.Telegram = {
      WebApp: {
        ready: () => console.log('üì± Mock: WebApp ready'),
        expand: () => console.log('üì± Mock: WebApp expand'),
        close: () => console.log('üì± Mock: WebApp close'),
        sendData: (data) => console.log('üì± Mock sendData:', data),
        MainButton: {
          show: () => {
            console.log('üîò Mock: MainButton show');
            this.showMockMainButton();
          },
          hide: () => {
            console.log('üîò Mock: MainButton hide');
            this.hideMockMainButton();
          },
          setText: (text) => {
            console.log('üîò Mock: MainButton setText:', text);
            this.updateMockMainButton(text);
          },
          enable: () => console.log('üîò Mock: MainButton enable'),
          disable: () => console.log('üîò Mock: MainButton disable')
        },
        BackButton: {
          show: () => {
            console.log('‚óÄÔ∏è Mock: BackButton show');
            this.showMockBackButton();
          },
          hide: () => {
            console.log('‚óÄÔ∏è Mock: BackButton hide');
            this.hideMockBackButton();
          }
        },
        HapticFeedback: {
          impactOccurred: (type) => console.log('üì≥ Mock haptic impact:', type),
          notificationOccurred: (type) => console.log('üì≥ Mock haptic notification:', type)
        },
        initDataUnsafe: {
          user: {
            id: 123456789,
            first_name: '–¢–µ—Å—Ç',
            last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            username: 'testuser',
            language_code: 'ru'
          }
        },
        initData: 'test_data',
        onEvent: (event, handler) => {
          console.log(`üì° Mock event listener: ${event}`);
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è mock –∫–Ω–æ–ø–æ–∫
          this.mockEventHandlers = this.mockEventHandlers || {};
          this.mockEventHandlers[event] = handler;
        },
        isVersionAtLeast: (version) => true,
        themeParams: {},
        viewportWidth: window.innerWidth,
        viewportHeight: window.innerHeight,
        viewportStableHeight: window.innerHeight
      }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º mock UI –¥–ª—è –∫–Ω–æ–ø–æ–∫
    this.setupMockUI();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º TelegramManager –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (window.TelegramManager) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –≤ TelegramManager
      TelegramManager.webApp = window.Telegram.WebApp;
      TelegramManager.user = window.Telegram.WebApp.initDataUnsafe.user;
      TelegramManager.initData = window.Telegram.WebApp.initData;
      TelegramManager.isInitialized = true;
      
      console.log('‚úÖ TelegramManager –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
      console.log('   - webApp:', !!TelegramManager.webApp);
      console.log('   - user:', TelegramManager.user);
      console.log('   - isInitialized:', TelegramManager.isInitialized);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock UI –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   */
  setupMockUI() {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è mock –∫–Ω–æ–ø–æ–∫
    const mockContainer = document.createElement('div');
    mockContainer.id = 'mock-telegram-ui';
    mockContainer.style.cssText = `
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.9);
      color: white;
      padding: 10px;
      display: flex;
      gap: 10px;
      align-items: center;
      justify-content: center;
      z-index: 10000;
      font-family: monospace;
      font-size: 14px;
    `;
    
    document.body.appendChild(mockContainer);
    this.mockContainer = mockContainer;
    this.mockEventHandlers = {};
  }

  /**
   * –ü–æ–∫–∞–∑ mock –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
   */
  showMockMainButton() {
    if (!this.mockContainer) return;
    
    let mainBtn = this.mockContainer.querySelector('#mock-main-btn');
    if (!mainBtn) {
      mainBtn = document.createElement('button');
      mainBtn.id = 'mock-main-btn';
      mainBtn.style.cssText = `
        background: #007AFF;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
      `;
      mainBtn.onclick = () => {
        if (this.mockEventHandlers?.mainButtonClicked) {
          this.mockEventHandlers.mainButtonClicked();
        }
      };
      this.mockContainer.appendChild(mainBtn);
    }
    mainBtn.style.display = 'block';
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ mock –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
   */
  updateMockMainButton(text) {
    const mainBtn = this.mockContainer?.querySelector('#mock-main-btn');
    if (mainBtn) {
      mainBtn.textContent = text;
    }
  }

  /**
   * –°–∫—Ä—ã—Ç–∏–µ mock –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
   */
  hideMockMainButton() {
    const mainBtn = this.mockContainer?.querySelector('#mock-main-btn');
    if (mainBtn) {
      mainBtn.style.display = 'none';
    }
  }

  /**
   * –ü–æ–∫–∞–∑ mock –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
   */
  showMockBackButton() {
    if (!this.mockContainer) return;
    
    let backBtn = this.mockContainer.querySelector('#mock-back-btn');
    if (!backBtn) {
      backBtn = document.createElement('button');
      backBtn.id = 'mock-back-btn';
      backBtn.textContent = '‚Üê –ù–∞–∑–∞–¥';
      backBtn.style.cssText = `
        background: #666;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
      `;
      backBtn.onclick = () => {
        if (this.mockEventHandlers?.backButtonClicked) {
          this.mockEventHandlers.backButtonClicked();
        }
      };
      this.mockContainer.appendChild(backBtn);
    }
    backBtn.style.display = 'block';
  }

  /**
   * –°–∫—Ä—ã—Ç–∏–µ mock –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
   */
  hideMockBackButton() {
    const backBtn = this.mockContainer?.querySelector('#mock-back-btn');
    if (backBtn) {
      backBtn.style.display = 'none';
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
   * @returns {Promise<void>}
   */
  async initializeRouter() {
    await Router.initialize();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupGlobalHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JavaScript
    window.addEventListener('error', (event) => {
      console.error('JavaScript –æ—à–∏–±–∫–∞:', event.error);
      this.handleError(event.error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Promise rejections
    window.addEventListener('unhandledrejection', (event) => {
      console.error('Unhandled Promise rejection:', event.reason);
      this.handleError(event.reason);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        this.onAppPause();
      } else {
        this.onAppResume();
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è online/offline —Å—Ç–∞—Ç—É—Å–∞
    window.addEventListener('online', () => {
      Utils.showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    });

    window.addEventListener('offline', () => {
      Utils.showNotification('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º', 'warning');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ beforeunload
    window.addEventListener('beforeunload', () => {
      this.onAppUnload();
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  setupResponsiveness() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
    const handleResize = Utils.throttle(() => {
      this.updateViewportSize();
    }, 100);

    window.addEventListener('resize', handleResize);
    window.addEventListener('orientationchange', handleResize);

    // –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    this.updateViewportSize();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π viewport –≤ Telegram
    if (TelegramManager && typeof TelegramManager.isReady === 'function' && TelegramManager.isReady()) {
      TelegramManager.addEventListener('viewportChanged', () => {
        this.updateViewportSize();
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ viewport
   */
  updateViewportSize() {
    if (this.debug) {
      console.log('üìê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ viewport');
      console.log('   - TelegramManager –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.TelegramManager);
      console.log('   - TelegramManager.isReady –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof window.TelegramManager?.isReady);
    }
    
    const vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è viewport
    let viewportSize;
    
    if (TelegramManager && typeof TelegramManager.isReady === 'function' && TelegramManager.isReady()) {
      viewportSize = TelegramManager.getViewportSize();
      if (this.debug) {
        console.log('   - –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram viewport:', viewportSize);
      }
    } else {
      viewportSize = { width: window.innerWidth, height: window.innerHeight };
      if (this.debug) {
        console.log('   - –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π viewport:', viewportSize);
      }
    }

    document.documentElement.style.setProperty('--viewport-width', `${viewportSize.width}px`);
    document.documentElement.style.setProperty('--viewport-height', `${viewportSize.height}px`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  onAppPause() {
    if (this.debug) {
      console.log('App paused');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    this.saveAppState();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  onAppResume() {
    if (this.debug) {
      console.log('App resumed');
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    this.restoreAppState();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  onAppUnload() {
    if (this.debug) {
      console.log('App unloading');
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.saveAppState();
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  saveAppState() {
    try {
      const state = {
        currentStep: Router.getCurrentStep(),
        timestamp: Utils.getCurrentTimestamp(),
        userData: Router.getUserData()
      };

      Utils.saveToStorage('appState', state);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  restoreAppState() {
    try {
      const state = Utils.getFromStorage('appState');
      if (state) {
        if (this.debug) {
          console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', state);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
   * @param {Error} error –û—à–∏–±–∫–∞
   */
  handleError(error) {
    if (this.debug) {
      console.error('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏:', error);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    this.reportError(error);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    Utils.showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', 'error');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
   * @param {Error} error –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
   */
  handleCriticalError(error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
    const errorScreen = this.createErrorScreen(error.message);
    const container = document.getElementById('screen-container');
    if (container) {
      container.innerHTML = '';
      container.appendChild(errorScreen);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
    this.reportError(error, true);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –æ—à–∏–±–∫–∏
   * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @returns {HTMLElement} DOM —ç–ª–µ–º–µ–Ω—Ç —ç–∫—Ä–∞–Ω–∞ –æ—à–∏–±–∫–∏
   */
  createErrorScreen(message) {
    const screen = document.createElement('div');
    screen.className = 'screen screen--centered';
    screen.innerHTML = `
      <div class="card">
        <div class="card__header">
          <h1 class="card__title">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h1>
        </div>
        <div class="card__content">
          <p class="text-secondary">${message}</p>
        </div>
        <div class="card__footer">
          <button class="btn btn--primary btn--full" onclick="location.reload()">
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          </button>
        </div>
      </div>
    `;
    return screen;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   * @param {Error} error –û—à–∏–±–∫–∞
   * @param {boolean} isCritical –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ª–∏ –æ—à–∏–±–∫–∞
   */
  reportError(error, isCritical = false) {
    try {
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫
      const errorData = {
        message: error.message,
        stack: error.stack,
        url: window.location.href,
        userAgent: navigator.userAgent,
        timestamp: Utils.getCurrentTimestamp(),
        userId: Utils.getTelegramId(),
        appVersion: this.version,
        isCritical
      };

      if (this.debug) {
        console.log('Error report:', errorData);
      }

      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    } catch (reportError) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ:', reportError);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
   * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
   */
  getAppInfo() {
    return {
      version: this.version,
      isInitialized: this.isInitialized,
      debug: this.debug,
      telegramSupported: Utils.isTelegramWebAppSupported(),
      runningInTelegram: Utils.isRunningInTelegram()
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new SmokyApp();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.SmokyApp = app;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
(async () => {
  try {
    await app.initialize();
  } catch (error) {
    console.error('–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
  }
})();
