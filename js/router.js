/**
 * –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞–º–∏ –¥–ª—è SmokyApp
 * –†–æ—É—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
 */

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —ç–∫—Ä–∞–Ω–∞
 */
class BaseScreen {
  constructor(name, config = {}) {
    this.name = name;
    this.title = config.title || name;
    this.hasMainButton = config.hasMainButton !== false;
    this.hasBackButton = config.hasBackButton !== false;
    this.mainButtonText = config.mainButtonText || '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
    this.isLoaded = false;
    this.container = null;
    this.data = {};
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    this.handleMainButton = this.handleMainButton.bind(this);
    this.handleBackButton = this.handleBackButton.bind(this);
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —ç–∫—Ä–∞–Ω–∞ (HTML, CSS, JS)
   * @returns {Promise<void>}
   */
  async load() {
    if (this.isLoaded) return;

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
      const htmlResponse = await fetch(`screens/${this.name}/${this.name}.html`);
      if (!htmlResponse.ok) throw new Error(`HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${this.name}`);
      const html = await htmlResponse.text();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º CSS
      await this.loadCSS();

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ç–∫—Ä–∞–Ω–∞
      this.container = document.createElement('div');
      this.container.className = 'screen';
      this.container.innerHTML = html;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º JS –ª–æ–≥–∏–∫—É —ç–∫—Ä–∞–Ω–∞
      await this.loadJS();

      this.isLoaded = true;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Ä–∞–Ω–∞ ${this.name}:`, error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ CSS —Ñ–∞–π–ª–∞ —ç–∫—Ä–∞–Ω–∞
   * @returns {Promise<void>}
   */
  async loadCSS() {
    return new Promise((resolve, reject) => {
      const existingLink = document.querySelector(`link[href*="${this.name}.css"]`);
      if (existingLink) {
        resolve();
        return;
      }

      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = `screens/${this.name}/${this.name}.css`;
      link.onload = () => resolve();
      link.onerror = () => reject(new Error(`CSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${this.name}`));
      document.head.appendChild(link);
    });
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ JS —Ñ–∞–π–ª–∞ —ç–∫—Ä–∞–Ω–∞
   * @returns {Promise<void>}
   */
  async loadJS() {
    return new Promise((resolve, reject) => {
      const existingScript = document.querySelector(`script[src*="${this.name}.js"]`);
      if (existingScript) {
        resolve();
        return;
      }

      const script = document.createElement('script');
      script.src = `screens/${this.name}/${this.name}.js`;
      script.onload = () => resolve();
      script.onerror = () => reject(new Error(`JS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${this.name}`));
      document.head.appendChild(script);
    });
  }

  /**
   * –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞
   * @returns {Promise<void>}
   */
  async show() {
    if (!this.isLoaded) {
      await this.load();
    }

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
    const screenContainer = document.getElementById('screen-container');
    screenContainer.innerHTML = '';
    screenContainer.appendChild(this.container);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –∫–Ω–æ–ø–∫–∏
    this.setupTelegramButtons();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω
    await this.init();

    // –§–æ–∫—É—Å –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è accessibility
    this.container.focus();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∫–Ω–æ–ø–æ–∫
   */
  setupTelegramButtons() {
    console.log('üîò –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∫–Ω–æ–ø–æ–∫');
    console.log('   - TelegramManager –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.TelegramManager);
    console.log('   - TelegramManager.isReady –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof window.TelegramManager?.isReady);
    
    if (!TelegramManager?.isReady) {
      console.warn('‚ö†Ô∏è TelegramManager.isReady –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }
    
    const isReady = TelegramManager.isReady();
    console.log('   - TelegramManager –≥–æ—Ç–æ–≤:', isReady);
    
    if (!isReady) {
      console.warn('‚ö†Ô∏è TelegramManager –Ω–µ –≥–æ—Ç–æ–≤');
      return;
    }

    // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    if (this.hasMainButton) {
      console.log('   - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É:', this.mainButtonText);
      TelegramManager.showMainButton(this.mainButtonText, this.isValid());
      TelegramManager.addEventListener('mainButtonClicked', this.handleMainButton);
    } else {
      console.log('   - –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É');
      TelegramManager.hideMainButton();
    }

    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if (this.hasBackButton && Router.canGoBack()) {
      console.log('   - –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥');
      TelegramManager.showBackButton();
      TelegramManager.addEventListener('backButtonClicked', this.handleBackButton);
    } else {
      console.log('   - –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥');
      TelegramManager.hideBackButton();
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
   * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
   * @returns {Promise<void>}
   */
  async init() {
    // –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞
   * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
   * @returns {boolean}
   */
  isValid() {
    return true;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
   * @returns {Object}
   */
  getData() {
    return this.data;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
   * @returns {Promise<void>}
   */
  async handleMainButton() {
    if (!this.isValid()) {
      TelegramManager.hapticFeedback('error');
      return;
    }

    try {
      TelegramManager.hapticFeedback('light');
      await this.save();
      Router.nextScreen();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω:', error);
      TelegramManager.hapticFeedback('error');
      Utils.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
   */
  handleBackButton() {
    TelegramManager.hapticFeedback('light');
    Router.goBack();
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞
   * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
   * @returns {Promise<void>}
   */
  async save() {
    // –ë–∞–∑–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å —ç–∫—Ä–∞–Ω–∞
   */
  cleanup() {
    if (TelegramManager.isReady()) {
      TelegramManager.removeEventListener('mainButtonClicked', this.handleMainButton);
      TelegramManager.removeEventListener('backButtonClicked', this.handleBackButton);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
   */
  updateMainButton() {
    if (!this.hasMainButton || !TelegramManager.isReady()) return;
    TelegramManager.setMainButtonEnabled(this.isValid());
  }
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—É—Ç–∏–Ω–≥–∞ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
 */
class ScreenRouter {
  constructor() {
    this.screens = new Map();
    this.currentScreen = null;
    this.history = [];
    this.currentStep = 0;
    this.totalSteps = 20;
    this.userData = null;
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    this.screenConfig = [
      { name: 'welcome', title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!' },
      { name: 'name-input', title: '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?' },
      { name: 'city-selection', title: '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥' },
      { name: 'progress-tracker', title: '–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å' },
      // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
    ];
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
   * @returns {Promise<void>}
   */
  async initialize() {
    try {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –Ω–∞—á–∞—Ç–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      console.log('   - Utils –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.Utils);
      console.log('   - API –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.API);
      console.log('   - API.initializeUser –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof window.API?.initializeUser);
      
      // –ü–æ–ª—É—á–∞–µ–º Telegram ID
      const telegramId = Utils.getTelegramId();
      console.log('   - Telegram ID –ø–æ–ª—É—á–µ–Ω:', telegramId);
      
      if (!telegramId) {
        throw new Error('Telegram ID –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('   - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const initResult = await API.initializeUser(telegramId);
      console.log('   - –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', initResult);
      
      this.userData = initResult;
      this.currentStep = initResult.currentStep;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
      const startScreenName = this.getScreenNameByStep(this.currentStep);
      console.log('   - –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω:', startScreenName, '–¥–ª—è —à–∞–≥–∞', this.currentStep);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
      Utils.updateProgressBar(this.currentStep, this.totalSteps);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
      console.log('   - –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω...');
      await this.navigateToScreen(startScreenName);
      
      console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞:', error);
      Utils.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
      
      // Fallback –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      console.log('üîÑ Fallback –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è');
      await this.navigateToScreen('welcome');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —ç–∫—Ä–∞–Ω–∞ –ø–æ –Ω–æ–º–µ—Ä—É —à–∞–≥–∞
   * @param {number} step –ù–æ–º–µ—Ä —à–∞–≥–∞
   * @returns {string} –ò–º—è —ç–∫—Ä–∞–Ω–∞
   */
  getScreenNameByStep(step) {
    if (step >= this.screenConfig.length) {
      return this.screenConfig[this.screenConfig.length - 1].name;
    }
    return this.screenConfig[step]?.name || 'welcome';
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞
   * @param {BaseScreen} screen –≠–∫–∑–µ–º–ø–ª—è—Ä —ç–∫—Ä–∞–Ω–∞
   */
  registerScreen(screen) {
    this.screens.set(screen.name, screen);
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
   * @param {string} screenName –ò–º—è —ç–∫—Ä–∞–Ω–∞
   * @returns {Promise<void>}
   */
  async navigateToScreen(screenName) {
    try {
      Utils.toggleLoading(true, '–ó–∞–≥—Ä—É–∑–∫–∞ —ç–∫—Ä–∞–Ω–∞...');

      // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
      if (this.currentScreen) {
        this.currentScreen.cleanup();
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
      let screen = this.screens.get(screenName);
      if (!screen) {
        const config = this.screenConfig.find(s => s.name === screenName);
        screen = new BaseScreen(screenName, config);
        this.registerScreen(screen);
      }

      // –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞
      await screen.show();
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      this.currentScreen = screen;
      this.history.push(screenName);

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
      const stepIndex = this.screenConfig.findIndex(s => s.name === screenName);
      if (stepIndex !== -1) {
        Utils.updateProgressBar(stepIndex, this.totalSteps);
      }

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω ${screenName}:`, error);
      Utils.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Ä–∞–Ω–∞', 'error');
    } finally {
      Utils.toggleLoading(false);
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω
   * @returns {Promise<void>}
   */
  async nextScreen() {
    const currentIndex = this.screenConfig.findIndex(s => s.name === this.currentScreen?.name);
    const nextIndex = currentIndex + 1;
    
    if (nextIndex < this.screenConfig.length) {
      this.currentStep = nextIndex;
      const nextScreenName = this.screenConfig[nextIndex].name;
      await this.navigateToScreen(nextScreenName);
    } else {
      // –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞
      await this.completeOnboarding();
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
   * @returns {Promise<void>}
   */
  async goBack() {
    if (this.history.length <= 1) return;
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    this.history.pop();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
    const previousScreenName = this.history[this.history.length - 1];
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
    await this.navigateToScreen(previousScreenName);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
   * @returns {boolean}
   */
  canGoBack() {
    return this.history.length > 1;
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ–≤–∞
   * @returns {Promise<void>}
   */
  async completeOnboarding() {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
      if (TelegramManager.isReady()) {
        TelegramManager.sendData({
          action: 'onboarding_completed',
          userId: Utils.getTelegramId(),
          completedAt: Utils.getCurrentTimestamp()
        });
      }

      Utils.showNotification('–ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp
      setTimeout(() => {
        TelegramManager.close();
      }, 2000);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞:', error);
      Utils.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞', 'error');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
   * @returns {BaseScreen|null}
   */
  getCurrentScreen() {
    return this.currentScreen;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
   * @returns {number}
   */
  getCurrentStep() {
    return this.currentStep;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Object|null}
   */
  getUserData() {
    return this.userData;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞
const router = new ScreenRouter();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.Router = router;
window.BaseScreen = BaseScreen;
