/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è SmokyApp
 * –†–∞–±–æ—Ç–∞ —Å –±—ç–∫–µ–Ω–¥ API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
 */
const API_CONFIG = {
  baseURL: '/api/v1',
  timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
  headers: {
    'Content-Type': 'application/json',
    'X-API-Key': 'your-api-key' // TODO: –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  }
};

/**
 * –ë–∞–∑–æ–≤—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
class HTTPClient {
  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
   * @param {string} url URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
   * @param {Object} options –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise<Object>} –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
   */
  static async request(url, options = {}) {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout);

    try {
      const response = await fetch(`${API_CONFIG.baseURL}${url}`, {
        ...options,
        headers: {
          ...API_CONFIG.headers,
          ...options.headers
        },
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      return data;
    } catch (error) {
      clearTimeout(timeoutId);
      
      if (error.name === 'AbortError') {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞');
      }
      
      console.error('API –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω:', error);
      throw error;
    }
  }

  /**
   * GET –∑–∞–ø—Ä–æ—Å
   * @param {string} url URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
   * @param {Object} params Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @returns {Promise<Object>} –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
   */
  static async get(url, params = {}) {
    const searchParams = new URLSearchParams(params);
    const queryString = searchParams.toString();
    const fullUrl = queryString ? `${url}?${queryString}` : url;
    
    return this.request(fullUrl, {
      method: 'GET'
    });
  }

  /**
   * POST –∑–∞–ø—Ä–æ—Å
   * @param {string} url URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
   * @param {Object} data –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @returns {Promise<Object>} –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
   */
  static async post(url, data = {}) {
    return this.request(url, {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }

  /**
   * PUT –∑–∞–ø—Ä–æ—Å
   * @param {string} url URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
   * @param {Object} data –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @returns {Promise<Object>} –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
   */
  static async put(url, data = {}) {
    return this.request(url, {
      method: 'PUT',
      body: JSON.stringify(data)
    });
  }

  /**
   * DELETE –∑–∞–ø—Ä–æ—Å
   * @param {string} url URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
   * @returns {Promise<Object>} –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
   */
  static async delete(url) {
    return this.request(url, {
      method: 'DELETE'
    });
  }
}

/**
 * API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
class UserAPI {
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
   * @param {number} telegramId Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUser(telegramId) {
    if (!telegramId) {
      throw new Error('Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    try {
      const response = await HTTPClient.get(`/user/${telegramId}`);
      return response.data || null;
    } catch (error) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      if (error.message.includes('404')) {
        return null;
      }
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} telegramId Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} name –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  static async saveName(telegramId, name) {
    if (!telegramId || !name) {
      throw new Error('Telegram ID –∏ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    if (!Utils.isValidName(name)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    return HTTPClient.post('/name', {
      telegram_id: telegramId,
      name: name.trim()
    });
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
   * @param {number} telegramId Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} town –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
   * @param {number} tzOffset –°–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  static async saveTown(telegramId, town, tzOffset) {
    if (!telegramId || !town || tzOffset === undefined) {
      throw new Error('–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    return HTTPClient.post('/town', {
      telegram_id: telegramId,
      town: town.trim(),
      tz_offset: tzOffset
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
   * @param {number} telegramId Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} tzOffset –°–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  static async updateTimezone(telegramId, tzOffset) {
    if (!telegramId || tzOffset === undefined) {
      throw new Error('Telegram ID –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    return HTTPClient.post('/timezone', {
      telegram_id: telegramId,
      tz_offset: tzOffset
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   * @param {number} telegramId Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} progressStep –ù–æ–º–µ—Ä —à–∞–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  static async updateProgressStep(telegramId, progressStep) {
    if (!telegramId || progressStep === undefined) {
      throw new Error('Telegram ID –∏ —à–∞–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    if (progressStep < 0 || progressStep > 20) {
      throw new Error('–®–∞–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 20');
    }

    return HTTPClient.post('/progress_step', {
      telegram_id: telegramId,
      progress_step: progressStep
    });
  }
}

/**
 * API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ä–æ–¥–∞–º–∏
 */
class CityAPI {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ OpenWeather API
   * @param {string} town –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
   * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ
   */
  static async checkTown(town) {
    if (!town || town.trim().length < 2) {
      throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ');
    }

    return HTTPClient.post('/check_town', {
      town: town.trim()
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤ (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
   * @param {string} query –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
   */
  static async searchCities(query) {
    if (!query || query.trim().length < 2) {
      return [];
    }

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return [];
  }
}

/**
 * –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
 */
class AppAPI {
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
   * @param {number} telegramId Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—É—â–∏–π —à–∞–≥
   */
  static async initializeUser(telegramId) {
    try {
      Utils.toggleLoading(true, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = await UserAPI.getUser(telegramId);
      
      if (userData) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        return {
          user: userData,
          isNewUser: false,
          currentStep: userData.progress_step || 0
        };
      } else {
        // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        return {
          user: null,
          isNewUser: true,
          currentStep: 0
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
      const isDevMode = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
      if (isDevMode) {
        console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return {
          user: {
            id: telegramId,
            telegram_id: telegramId,
            first_name: '–¢–µ—Å—Ç',
            last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            username: 'testuser',
            language_code: 'ru',
            progress_step: 0,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          },
          isNewUser: true,
          currentStep: 0
        };
      }
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      Utils.toggleLoading(false);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
   * @param {number} telegramId Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} currentStep –¢–µ–∫—É—â–∏–π —à–∞–≥
   * @param {Object} stepData –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  static async saveStepAndProgress(telegramId, currentStep, stepData = {}) {
    try {
      Utils.toggleLoading(true, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —à–∞–≥–∞
      if (stepData.name) {
        await UserAPI.saveName(telegramId, stepData.name);
      }
      
      if (stepData.town && stepData.tzOffset !== undefined) {
        await UserAPI.saveTown(telegramId, stepData.town, stepData.tzOffset);
      }
      
      if (stepData.tzOffset !== undefined && !stepData.town) {
        await UserAPI.updateTimezone(telegramId, stepData.tzOffset);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const nextStep = currentStep + 1;
      await UserAPI.updateProgressStep(telegramId, nextStep);
      
      Utils.showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–∞:', error);
      Utils.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
      throw error;
    } finally {
      Utils.toggleLoading(false);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
   * @param {string} cityName –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ
   */
  static async validateCity(cityName) {
    try {
      Utils.toggleLoading(true, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞...');
      
      const cityData = await CityAPI.checkTown(cityName);
      
      if (cityData.success) {
        return {
          isValid: true,
          town: cityData.town,
          utcOffset: cityData.utc_offset,
          cached: cityData.cached || false
        };
      } else {
        return {
          isValid: false,
          error: '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–∞:', error);
      return {
        isValid: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ä–æ–¥–∞'
      };
    } finally {
      Utils.toggleLoading(false);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç API –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.API = {
  // –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ API
  UserAPI,
  CityAPI,
  
  // –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ AppAPI
  initializeUser: AppAPI.initializeUser,
  saveStepAndProgress: AppAPI.saveStepAndProgress,
  validateCity: AppAPI.validateCity,
  
  // HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
  HTTPClient,
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  config: API_CONFIG
};
