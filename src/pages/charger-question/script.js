/**
 * SmokyApp - Charger Question Screen JavaScript
 * –°–∫—Ä–∏–ø—Ç —ç–∫—Ä–∞–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –∑–∞—Ä—è–¥–∫–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram WebApp API
 */

(function() {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    let tg = null;
    let isReady = false;
    let userChoice = null;

    // --- Telegram WebApp Keyboard Handling ---
    if (window.Telegram && window.Telegram.WebApp) {
        const WebApp = window.Telegram.WebApp;
        const appContainer = document.querySelector('.app-container');

        // Initial setup for viewport
        WebApp.ready();
        WebApp.expand(); // Ensure the app expands to full height

        // Listen for viewport changes (including keyboard appearance/disappearance)
        WebApp.onEvent('viewportChanged', () => {
            const currentViewportHeight = WebApp.viewportHeight;
            const stableViewportHeight = WebApp.viewportStableHeight;

            const keyboardHeight = stableViewportHeight - currentViewportHeight;

            if (appContainer) {
                // Apply padding to the bottom of the app container
                appContainer.style.paddingBottom = `${Math.max(0, keyboardHeight)}px`;
            }
        });
    }

    const config = {
        api: {
            baseUrl: '/api/v1'
        },
        development: {
            enableDebugLogs: true,
            enableBrowserTestMode: true,
            testUser: {
                id: 123456789,
                first_name: '–¢–µ—Å—Ç',
                last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                username: 'testuser',
                language_code: 'ru'
            }
        },
        telegram: {
            enableHapticFeedback: true,
            autoExpand: true,
            applyTheme: true
        },
        ui: {
            loadingAnimationDuration: 500,
            notificationDuration: 3000,
            enableAnimations: true
        }
    };

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
     */
    const showCriticalError = (title, message) => {
        hideLoading();
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: #ffdddd;
            color: #d8000c;
            padding: 10px;
            z-index: 10000;
            font-size: 14px;
            text-align: center;
            border-bottom: 2px solid #d8000c;
            word-break: break-word;
        `;
        errorDiv.innerHTML = `<b>${title}</b><br><small>${message}</small>`;
        document.body.prepend(errorDiv);
    };

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    const main = async () => {
        try {
            console.log('üöÄ Charger question screen –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –≤ –ë–î –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ charger-question —ç–∫—Ä–∞–Ω–∞
            try {
                if (window.StepRouter) {
                    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –¥–æ 8 (charger-question) —á–µ—Ä–µ–∑ StepRouter');
                    const success = await window.StepRouter.updateStep(8);
                    if (success) {
                        console.log('‚úÖ –®–∞–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 8');
                    } else {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–≥ –¥–æ 8');
                    }
                } else {
                    console.warn('‚ö†Ô∏è StepRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–≥–∞ –Ω–∞ charger-question —ç–∫—Ä–∞–Ω–µ');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞ –Ω–∞ charger-question —ç–∫—Ä–∞–Ω–µ:', error);
            }

            // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SmokyApp –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.SmokyApp) {
                console.log('üîß SmokyApp —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–∂–∏–¥–∞–µ–º—Å—è –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
                let waitCount = 0;
                while (!window.SmokyApp.isInitialized && waitCount < 50) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                    waitCount++;
                }
                
                if (window.SmokyApp.isInitialized) {
                    console.log('‚úÖ SmokyApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é...');
                    
                    // –ü–æ–∑–≤–æ–ª—è–µ–º SmokyApp –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                    if (window.StepRouter) {
                        const currentStep = await window.StepRouter.getCurrentStep();
                        console.log(`üìç –¢–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentStep}`);
                        
                        if (currentStep > 8) {
                            console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —à–∞–≥–µ –±–æ–ª—å—à–µ 8, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ StepRouter');
                            
                            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —à–∞–≥—É
                            await window.StepRouter.navigateToCurrentStep(true);
                            return;
                        }
                    }
                } else {
                    console.warn('‚ö†Ô∏è SmokyApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥');
                }
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –∏ —Å–æ–±—ã—Ç–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ charger-question screen
            setupUI();
            setupEventListeners();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∏–ª–∏ —Ä–µ–∂–∏–º–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            if (window.Telegram && window.Telegram.WebApp) {
                tg = window.Telegram.WebApp;
                console.log(`‚úÖ Telegram WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω (v${tg.version}). –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...`);
                await setupTelegramWebApp();
            } else {
                console.warn('‚ö†Ô∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞.');
                await setupBrowserMode();
            }

            isReady = true;
            console.log('‚úÖ Charger question screen —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
            hideLoading();

        } catch (error) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:', error);
            showCriticalError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', error.message);
            handleError(error, 'Initialization');
        }
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Telegram
     */
    const setupTelegramWebApp = async () => {
        try {
            console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Telegram...');
            tg.ready();
            if (config.telegram.autoExpand) {
                tg.expand();
            }
            if (config.telegram.applyTheme) {
                applyTelegramTheme();
            }
            setupTelegramButtons();

            console.log('üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram...');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ initDataUnsafe
            console.log('üîç –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram (initDataUnsafe):', tg.initDataUnsafe);

            const user = tg.initDataUnsafe.user;

            if (user && typeof user === 'object') {
                // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                console.log('‚úÖ –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω:', user);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID
                if (!user.id) {
                    throw new Error('–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ `user.id`.');
                }
                
                console.log(`üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}. Charger question screen –∑–∞–≥—Ä—É–∂–µ–Ω.`);

            } else {
                // –≠—Ç–∞ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –Ω–æ –¥–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: `tg.initDataUnsafe.user` –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Telegram.');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –µ–µ —Å–æ–æ–±—â–∏—Ç—å
            showCriticalError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö', `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. –î–µ—Ç–∞–ª–∏: ${error.message}`);
            // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            handleError(error, 'setupTelegramWebApp');
        }
    };
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ (—Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏)
     */
    const setupBrowserMode = async () => {
        console.log('üåê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞.');
        const testUser = config?.development?.testUser;
        if (!testUser) {
            throw new Error('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (`development.testUser`).');
        }
        
        console.log(`üß™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.first_name}`);
        console.log('‚úÖ Charger question screen –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞');
    };

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ç–µ–º–æ–π Telegram
     */
    const applyTelegramTheme = () => {
        if (!tg?.themeParams) return;
        
        const theme = tg.themeParams;
        const root = document.documentElement;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
        if (theme.bg_color) {
            root.style.setProperty('--tg-theme-bg-color', theme.bg_color);
        }
        if (theme.text_color) {
            root.style.setProperty('--tg-theme-text-color', theme.text_color);
        }
        if (theme.hint_color) {
            root.style.setProperty('--tg-theme-hint-color', theme.hint_color);
        }
        if (theme.button_color) {
            root.style.setProperty('--tg-theme-button-color', theme.button_color);
        }
        if (theme.button_text_color) {
            root.style.setProperty('--tg-theme-button-text-color', theme.button_text_color);
        }
        if (theme.secondary_bg_color) {
            root.style.setProperty('--tg-theme-secondary-bg-color', theme.secondary_bg_color);
        }
        
        console.log('üé® –¢–µ–º–∞ Telegram –ø—Ä–∏–º–µ–Ω–µ–Ω–∞:', theme);
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ Telegram
     * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ Telegram WebApp
     */
    const setupTelegramButtons = () => {
        if (!tg) return;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏—Å—Ç–æ—Ä–∏–∏
        tg.BackButton.hide();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É (–ø–æ–∫–∞ —Å–∫—Ä—ã–≤–∞–µ–º)
        tg.MainButton.hide();
        
        console.log('üîò –ö–Ω–æ–ø–∫–∏ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
     */
    const setupUI = () => {
        const viewport = document.querySelector('meta[name="viewport"]');
        if (viewport) {
            viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover');
        }
        console.log('üé® UI –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    const setupEventListeners = () => {
        const smokingButton = document.getElementById('smokingButton');
        const quittingButton = document.getElementById('quittingButton');

        if (smokingButton) {
            smokingButton.addEventListener('click', () => handleChoiceClick('smoking'));
            smokingButton.addEventListener('keydown', (e) => (e.key === 'Enter' || e.key === ' ') && handleChoiceClick('smoking'));
            console.log('‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É—Ä—é" –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ smokingButton –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        if (quittingButton) {
            quittingButton.addEventListener('click', () => handleChoiceClick('quitting'));
            quittingButton.addEventListener('keydown', (e) => (e.key === 'Enter' || e.key === ' ') && handleChoiceClick('quitting'));
            console.log('‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–•–æ—á—É –±—Ä–æ—Å–∏—Ç—å" –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ quittingButton –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        console.log('‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    };

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
     */
    const handleChoiceClick = (choice) => {
        console.log(`üöÄ handleChoiceClick –≤—ã–∑–≤–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º: ${choice}`);
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–∫–∏
        if (userChoice) return;
        
        userChoice = choice;
        
        if (tg?.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('medium');
        }
        
        // –í–∏–∑—É–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        highlightSelectedButton(choice);
        
        // –ë–µ—Å—à–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–∫—Ä–∞–Ω—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ—Å—à–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å –≤—ã–±–æ—Ä–æ–º: ${choice}`);
        setTimeout(() => {
            console.log('‚è∞ –¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª, –≤—ã–∑—ã–≤–∞–µ–º navigateBasedOnChoice...');
            navigateBasedOnChoice(choice);
        }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    };

    /**
     * –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
     */
    const highlightSelectedButton = (choice) => {
        const smokingButton = document.getElementById('smokingButton');
        const quittingButton = document.getElementById('quittingButton');
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –æ–±–µ–∏—Ö –∫–Ω–æ–ø–æ–∫
        smokingButton.classList.remove('selected');
        quittingButton.classList.remove('selected');
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        if (choice === 'smoking') {
            smokingButton.classList.add('selected');
        } else if (choice === 'quitting') {
            quittingButton.classList.add('selected');
        }
        
        console.log(`‚ú® –ö–Ω–æ–ø–∫–∞ "${choice}" –≤—ã–¥–µ–ª–µ–Ω–∞`);
    };

    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    const navigateBasedOnChoice = async (choice) => {
        console.log(`üöÄ navigateBasedOnChoice –≤—ã–∑–≤–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º: ${choice}`);
        
        if (tg?.sendData) {
            try {
                tg.sendData(JSON.stringify({ 
                    type: 'charger_question_completed', 
                    choice: choice,
                    timestamp: new Date().toISOString() 
                }));
                console.log('üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            }
        }
        
        // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ä–∞–∑–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
        if (choice === 'smoking') {
            console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∏—Ç - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –¥–ª—è –∫—É—Ä—è—â–∏—Ö');
            // –ü–æ–∫–∞ —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ welcome –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            window.location.href = '../welcome/index.html';
        } else if (choice === 'quitting') {
            console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –±—Ä–æ—Å–∏—Ç—å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –¥–ª—è –∂–µ–ª–∞—é—â–∏—Ö –±—Ä–æ—Å–∏—Ç—å');
            // –ü–æ–∫–∞ —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ name-input –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            window.location.href = '../name-input/index.html';
        }
    };

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    const showNotification = (message) => {
        if (tg?.showAlert) {
            tg.showAlert(message);
        } else {
            alert(message);
        }
        console.log('üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', message);
    };

    /**
     * –ü—Ä–æ—Å—Ç—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
     */
    const showLoading = () => {
        const loadingOverlay = document.getElementById('loadingOverlay');
        
        if (loadingOverlay) {
            loadingOverlay.classList.remove('hidden');
            
            // –î–æ–±–∞–≤–ª—è–µ–º haptic feedback –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (tg?.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
            }
        }
    };

    const hideLoading = () => {
        const loadingOverlay = document.getElementById('loadingOverlay');
        if (loadingOverlay) {
            // –ü–ª–∞–≤–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
            setTimeout(() => {
                loadingOverlay.classList.add('hidden');
                
                // Haptic feedback –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                if (tg?.HapticFeedback) {
                    tg.HapticFeedback.notificationOccurred('success');
                }
            }, 600);
        }
    };

    // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    const showLoadingWithText = (text) => {
        showLoading();
    };

    /**
     * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
     */
    const handleError = (error, context = 'Unknown') => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${context}:`, error);
        if (tg?.sendData) {
            try {
                tg.sendData(JSON.stringify({ type: 'error', context, error: error.message, timestamp: new Date().toISOString() }));
            } catch (e) { /* ignore */ }
        }
    };

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    window.addEventListener('error', (event) => handleError(event.error, 'Global Error'));
    window.addEventListener('unhandledrejection', (event) => handleError(event.reason, 'Unhandled Promise Rejection'));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    document.addEventListener('DOMContentLoaded', main);

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
    window.SmokyChargerQuestion = {
        isReady: () => isReady,
        getTelegram: () => tg,
        showNotification: showNotification,
        getUserChoice: () => userChoice,
    };

})();