/**
 * SmokyApp - Calculation Results Screen JavaScript
 * –°–∫—Ä–∏–ø—Ç —ç–∫—Ä–∞–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∏–∫–æ—Ç–∏–Ω–æ–≤–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
 */

(function() {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let tg = null;
    let isReady = false;
    let calculationResults = null;

    // --- Telegram WebApp Keyboard Handling ---
    if (window.Telegram && window.Telegram.WebApp) {
        const WebApp = window.Telegram.WebApp;
        const appContainer = document.querySelector('.app-container');

        // Initial setup for viewport
        WebApp.ready();
        WebApp.expand();

        // Listen for viewport changes (including keyboard appearance/disappearance)
        WebApp.onEvent('viewportChanged', () => {
            const currentViewportHeight = WebApp.viewportHeight;
            const stableViewportHeight = WebApp.viewportStableHeight;

            const keyboardHeight = stableViewportHeight - currentViewportHeight;

            if (appContainer) {
                appContainer.style.paddingBottom = `${Math.max(0, keyboardHeight)}px`;
            }
        });
    }

    const config = {
        api: {
            baseUrl: '/api/v1'
        },
        development: {
            enableDebugLogs: true,
            enableBrowserTestMode: true,
            testUser: {
                id: 123456789,
                first_name: '–¢–µ—Å—Ç',
                last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                username: 'testuser',
                language_code: 'ru'
            }
        },
        telegram: {
            enableHapticFeedback: true,
            autoExpand: true,
            applyTheme: true
        },
        ui: {
            loadingAnimationDuration: 500,
            notificationDuration: 3000,
            enableAnimations: true
        }
    };

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
     */
    const showCriticalError = (title, message) => {
        hideLoading();
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: #ffdddd;
            color: #d8000c;
            padding: 10px;
            z-index: 10000;
            font-size: 14px;
            text-align: center;
            border-bottom: 2px solid #d8000c;
            word-break: break-word;
        `;
        errorDiv.innerHTML = `<b>${title}</b><br><small>${message}</small>`;
        document.body.prepend(errorDiv);
    };

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞
     */
    const loadAndDisplayResults = () => {
        console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞...');

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ localStorage
            const resultsData = localStorage.getItem('nicotineCalculationResult');
            
            if (!resultsData) {
                throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ localStorage');
            }

            calculationResults = JSON.parse(resultsData);
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', calculationResults);

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É–º–º—É —Ç—Ä–∞—Ç
            displayTotalSpent();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            showCriticalError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', error.message);
        }
    };

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—ã —Ç—Ä–∞—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     */
    const displayTotalSpent = () => {
        const amountElement = document.getElementById('totalAmountSpent');
        
        if (!amountElement || !calculationResults?.calculations?.total_spent_rubles) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É–º–º—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            return;
        }

        const totalAmount = calculationResults.calculations.total_spent_rubles;
        console.log('üí∞ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É–º–º—É —Ç—Ä–∞—Ç:', totalAmount);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
        const formattedAmount = new Intl.NumberFormat('ru-RU').format(totalAmount);
        
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã
        amountElement.style.opacity = '0';
        
        setTimeout(() => {
            amountElement.textContent = formattedAmount;
            amountElement.style.opacity = '1';
            amountElement.classList.add('animate');
        }, 300);

        console.log('‚úÖ –°—É–º–º–∞ —Ç—Ä–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞:', formattedAmount);
    };

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    const main = async () => {
        try {
            console.log('üöÄ Calculation results screen –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');

            // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –≤ –ë–î –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ results —ç–∫—Ä–∞–Ω–∞
            try {
                if (window.StepRouter) {
                    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –¥–æ 15 (calculation-results) —á–µ—Ä–µ–∑ StepRouter');
                    const success = await window.StepRouter.updateStep(15);
                    if (success) {
                        console.log('‚úÖ –®–∞–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 15');
                    } else {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–≥ –¥–æ 15');
                    }
                } else {
                    console.warn('‚ö†Ô∏è StepRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–≥–∞ –Ω–∞ results —ç–∫—Ä–∞–Ω–µ');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞ –Ω–∞ results —ç–∫—Ä–∞–Ω–µ:', error);
            }

            // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SmokyApp –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.SmokyApp) {
                console.log('üîß SmokyApp —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–∂–∏–¥–∞–µ–º—Å—è –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
                let waitCount = 0;
                while (!window.SmokyApp.isInitialized && waitCount < 50) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                    waitCount++;
                }
                
                if (window.SmokyApp.isInitialized) {
                    console.log('‚úÖ SmokyApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é...');
                    
                    // –ü–æ–∑–≤–æ–ª—è–µ–º SmokyApp –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                    if (window.StepRouter) {
                        const currentStep = await window.StepRouter.getCurrentStep();
                        console.log(`üìç –¢–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentStep}`);
                        
                        if (currentStep > 15) {
                            console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —à–∞–≥–µ –±–æ–ª—å—à–µ 15, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ StepRouter');
                            await window.StepRouter.navigateToCurrentStep(true);
                            return;
                        }
                    }
                } else {
                    console.warn('‚ö†Ô∏è SmokyApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥');
                }
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            loadAndDisplayResults();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –∏ —Å–æ–±—ã—Ç–∏–π
            setupUI();
            setupEventListeners();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∏–ª–∏ —Ä–µ–∂–∏–º–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            if (window.Telegram && window.Telegram.WebApp) {
                tg = window.Telegram.WebApp;
                console.log(`‚úÖ Telegram WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω (v${tg.version}). –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...`);
                await setupTelegramWebApp();
            } else {
                console.warn('‚ö†Ô∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞.');
                await setupBrowserMode();
            }

            isReady = true;
            console.log('‚úÖ Calculation results screen —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
            hideLoading();

        } catch (error) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:', error);
            showCriticalError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', error.message);
            handleError(error, 'Initialization');
        }
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Telegram
     */
    const setupTelegramWebApp = async () => {
        try {
            console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Telegram...');
            tg.ready();
            if (config.telegram.autoExpand) {
                tg.expand();
            }
            if (config.telegram.applyTheme) {
                applyTelegramTheme();
            }
            setupTelegramButtons();

            console.log('üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram...');
            
            const user = tg.initDataUnsafe?.user;

            if (user && typeof user === 'object') {
                console.log('‚úÖ –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω:', user);

                if (!user.id) {
                    throw new Error('–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ `user.id`.');
                }
                
                console.log(`üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}. Calculation results screen –∑–∞–≥—Ä—É–∂–µ–Ω.`);

            } else {
                console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: `tg.initDataUnsafe.user` –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Telegram.');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            showCriticalError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö', `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Telegram. –î–µ—Ç–∞–ª–∏: ${error.message}`);
            handleError(error, 'setupTelegramWebApp');
        }
    };
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ (—Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏)
     */
    const setupBrowserMode = async () => {
        console.log('üåê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞.');
        const testUser = config?.development?.testUser;
        if (!testUser) {
            throw new Error('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (`development.testUser`).');
        }
        
        console.log(`üß™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.first_name}`);
        console.log('‚úÖ Calculation results screen –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞');
    };

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
     */
    const applyTelegramTheme = () => {
        if (!tg?.themeParams) return;
        
        const theme = tg.themeParams;
        const root = document.documentElement;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
        if (theme.bg_color) {
            root.style.setProperty('--tg-theme-bg-color', theme.bg_color);
        }
        if (theme.text_color) {
            root.style.setProperty('--tg-theme-text-color', theme.text_color);
        }
        if (theme.hint_color) {
            root.style.setProperty('--tg-theme-hint-color', theme.hint_color);
        }
        if (theme.button_color) {
            root.style.setProperty('--tg-theme-button-color', theme.button_color);
        }
        if (theme.button_text_color) {
            root.style.setProperty('--tg-theme-button-text-color', theme.button_text_color);
        }
        if (theme.secondary_bg_color) {
            root.style.setProperty('--tg-theme-secondary-bg-color', theme.secondary_bg_color);
        }
        
        console.log('üé® –¢–µ–º–∞ Telegram –ø—Ä–∏–º–µ–Ω–µ–Ω–∞:', theme);
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ Telegram
     */
    const setupTelegramButtons = () => {
        if (!tg) return;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        tg.BackButton.hide();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É (–ø–æ–∫–∞ —Å–∫—Ä—ã–≤–∞–µ–º)
        tg.MainButton.hide();
        
        console.log('üîò –ö–Ω–æ–ø–∫–∏ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
     */
    const setupUI = () => {
        const viewport = document.querySelector('meta[name="viewport"]');
        if (viewport) {
            viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover');
        }
        console.log('üé® UI –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    const setupEventListeners = () => {
        const forwardButton = document.getElementById('forwardButton');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä–µ–¥
        if (forwardButton) {
            forwardButton.addEventListener('click', goForward);
        }
        
        console.log('‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    };

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä–µ–¥
     */
    const goForward = () => {
        console.log('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–∫—Ä–∞–Ω—É');
        
        if (tg?.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('medium');
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (tg?.sendData) {
            try {
                tg.sendData(JSON.stringify({ 
                    type: 'results_viewed', 
                    total_spent: calculationResults?.calculations?.total_spent_rubles,
                    timestamp: new Date().toISOString() 
                }));
                console.log('üì§ –°–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è:', error);
            }
        }

        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω (–ø–æ–∫–∞ –Ω–∞ welcome –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        
        if (window.LoadingManager?.navigateWithTransition) {
            window.LoadingManager.navigateWithTransition('../welcome/index.html');
        } else {
            window.location.href = '../welcome/index.html';
        }
    };

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    const showNotification = (message) => {
        if (tg?.showAlert) {
            tg.showAlert(message);
        } else {
            alert(message);
        }
        console.log('üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', message);
    };

    /**
     * –ü—Ä–æ—Å—Ç—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
     */
    const showLoading = () => {
        const loadingOverlay = document.getElementById('loadingOverlay');
        
        if (loadingOverlay) {
            loadingOverlay.classList.remove('hidden');
            
            if (tg?.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
            }
        }
    };

    const hideLoading = () => {
        const loadingOverlay = document.getElementById('loadingOverlay');
        if (loadingOverlay) {
            setTimeout(() => {
                loadingOverlay.classList.add('hidden');
                
                if (tg?.HapticFeedback) {
                    tg.HapticFeedback.notificationOccurred('success');
                }
            }, 600);
        }
    };

    /**
     * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
     */
    const handleError = (error, context = 'Unknown') => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${context}:`, error);
        if (tg?.sendData) {
            try {
                tg.sendData(JSON.stringify({ type: 'error', context, error: error.message, timestamp: new Date().toISOString() }));
            } catch (e) { /* ignore */ }
        }
    };

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    window.addEventListener('error', (event) => handleError(event.error, 'Global Error'));
    window.addEventListener('unhandledrejection', (event) => handleError(event.reason, 'Unhandled Promise Rejection'));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    document.addEventListener('DOMContentLoaded', main);

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
    window.SmokyCalculationResults = {
        isReady: () => isReady,
        getTelegram: () => tg,
        showNotification: showNotification,
        getCalculationResults: () => calculationResults,
        goForward: goForward
    };

})();