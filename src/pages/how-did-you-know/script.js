/**
 * SmokyApp - How Did You Know Screen Script
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */

document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const userName = localStorage.getItem('userName') || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const screenTitle = document.getElementById('screenTitle');
    if (screenTitle) {
        screenTitle.textContent = `${userName}, –æ—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –°–º–æ–∫–∏?`;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–±–æ—Ä–∞
    const optionCards = document.querySelectorAll('.option-card');

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     * @param {string} source - –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è
     * @param {Function} errorCallback - callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @returns {Promise<boolean>} —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    const sendSourceToServer = async (source, errorCallback = null) => {
        try {
            const result = await window.APIClient.sendUserSource(source);
            return result.success === true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
            
            if (error instanceof window.APIClient.APIError) {
                errorMessage = error.getUserMessage();
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π callback –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            if (errorCallback) {
                errorCallback(errorMessage);
            } else if (window.showErrorModal) {
                window.showErrorModal(errorMessage);
            }
            
            return false;
        }
    };

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π "–°–∏–ª–∞ –≤–æ–ª–∏ –∫—Ä–µ–ø–Ω–µ—Ç"
     * @param {string} selectedOption - –≤—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è
     */
    const showLoadingModal = (selectedOption) => {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const existingModal = document.querySelector('.loading-progress-modal');
        if (existingModal) {
            existingModal.remove();
        }

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        const modalHTML = `
            <div class="loading-progress-modal" id="loadingProgressModal">
                <div class="modal-overlay-blur"></div>
                <div class="loading-progress-modal-content">
                    <h2 class="loading-progress-modal-title">üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!</h2>
                    <div class="loading-progress-modal-text-container">
                        <p class="loading-progress-modal-text">–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è...</p>
                    </div>
                    
                    <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Å–∏–ª—ã –≤–æ–ª–∏ -->
                    <div class="strength-indicator-container">
                        <!-- –≠–º–æ–¥–∑–∏ –º—ã—à—Ü–∞ -->
                        <div class="strength-emoji-container">
                            <div class="strength-emoji">üí™</div>
                            
                            <!-- –ß–∞—Å—Ç–∏—á–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏ -->
                            <div class="energy-particles">
                                <div class="particle particle-1"></div>
                                <div class="particle particle-2"></div>
                                <div class="particle particle-3"></div>
                                <div class="particle particle-4"></div>
                                <div class="particle particle-5"></div>
                                <div class="particle particle-6"></div>
                            </div>
                        </div>
                        
                        <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ -->
                        <div class="strength-progress-bar">
                            <div class="strength-progress-fill"></div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = modalHTML;
        const modal = tempDiv.firstElementChild;
        document.body.appendChild(modal);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        requestAnimationFrame(() => {
            modal.classList.remove('hidden');
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        startStrengthAnimation(modal);

        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ñ–æ–Ω–µ
        preloadNextPage();

        // Haptic feedback –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
            window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
        }

        return modal;
    };

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–∏–ª—ã –≤–æ–ª–∏
     * @param {HTMLElement} modal - –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    const startStrengthAnimation = (modal) => {
        const progressFill = modal.querySelector('.strength-progress-fill');
        const emoji = modal.querySelector('.strength-emoji');
        const particles = modal.querySelectorAll('.particle');
        
        let progress = 0;
        const duration = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã
        const startTime = Date.now();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        emoji.style.setProperty('--progress', '0');
        progressFill.style.setProperty('--progress', '0');
        
        // –§–ª–∞–≥–∏ –¥–ª—è –ø—É–ª—å—Å–∞—Ü–∏–∏ (—á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ)
        let pulse1Triggered = false;
        let pulse2Triggered = false;
        
        const animate = () => {
            const elapsed = Date.now() - startTime;
            progress = Math.min(elapsed / duration, 1);
            
            // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–µ easing (ease-out quadratic –¥–ª—è –º–µ–Ω—å—à–µ–π —Ä–µ–∑–∫–æ—Å—Ç–∏)
            const easedProgress = 1 - Math.pow(1 - progress, 2);
            
            // –°–≥–ª–∞–∂–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ
            const newProgressValue = Math.round(easedProgress * 1000) / 1000; // –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤
            const currentProgress = parseFloat(emoji.style.getPropertyValue('--progress') || '0');
            
            if (Math.abs(newProgressValue - currentProgress) > 0.005) { // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ > 0.5%
                emoji.style.setProperty('--progress', newProgressValue.toString());
            }
            
            progressFill.style.setProperty('--progress', progress.toString());
            
            // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–µ–∫ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ –º–µ—Ä–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –Ω–∏–º–∏)
            particles.forEach((particle, index) => {
                const particleThreshold = (index / particles.length) * 0.8; // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ 80% –≤—Ä–µ–º–µ–Ω–∏
                if (easedProgress > particleThreshold) {
                    particle.classList.add('active');
                }
            });
            
            // –ü—É–ª—å—Å–∞—Ü–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
            if (progress > 0.3 && !pulse1Triggered) {
                emoji.classList.add('pulse-effect');
                pulse1Triggered = true;
                // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
                setTimeout(() => {
                    emoji.classList.remove('pulse-effect');
                }, 600);
            }
            
            if (progress > 0.7 && !pulse2Triggered) {
                emoji.classList.add('pulse-effect');
                pulse2Triggered = true;
                setTimeout(() => {
                    emoji.classList.remove('pulse-effect');
                }, 600);
            }
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            } else {
                // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                setTimeout(() => {
                    completeLoading(modal);
                }, 500);
            }
        };
        
        animate();
    };

    /**
     * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ñ–æ–Ω–µ
     */
    const preloadNextPage = () => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        const nextPageUrl = '../next-page/index.html'; // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º LoadingManager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.LoadingManager && window.LoadingManager.preloadPage) {
            window.LoadingManager.preloadPage(nextPageUrl);
        } else {
            // Fallback - –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ link
            const link = document.createElement('link');
            link.rel = 'prefetch';
            link.href = nextPageUrl;
            document.head.appendChild(link);
        }
        
        console.log('–ù–∞—á–∞–ª–∞—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', nextPageUrl);
    };

    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     * @param {HTMLElement} modal - –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    const completeLoading = (modal) => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        const emoji = modal.querySelector('.strength-emoji');
        emoji.classList.add('final-burst');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
        setTimeout(() => {
            modal.classList.add('hidden');
            setTimeout(() => {
                if (modal && modal.parentNode) {
                    modal.parentNode.removeChild(modal);
                }
                
                // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                navigateToNextPage();
            }, 300);
        }, 800);
    };

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    const navigateToNextPage = () => {
        const nextPageUrl = '../next-page/index.html'; // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º LoadingManager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.LoadingManager && window.LoadingManager.navigateWithTransition) {
            window.LoadingManager.navigateWithTransition(nextPageUrl);
        } else {
            // –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ—Ö–æ–¥
            window.location.href = nextPageUrl;
        }
        
        console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:', nextPageUrl);
    };


    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ–ø—Ü–∏–∏ "–î—Ä—É–≥–æ–µ"
     */
    const showOtherSourceModal = () => {
        const modal = document.getElementById('otherSourceModal');
        const modalText = document.getElementById('otherSourceModalText');
        
        // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        modalText.textContent = `–í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å! ${userName}, –∞ –≥–¥–µ –∂–µ –≤—ã –æ–±–æ –º–Ω–µ —É—Å–ª—ã—à–∞–ª–∏? –ú–æ–∂–µ—Ç, —ç—Ç–æ –±—ã–ª –ø–æ–¥–∫–∞—Å—Ç, —Å—Ç–∞—Ç—å—è –∏–ª–∏ –¥–∞–∂–µ —Å–∞—Ä–∞—Ñ–∞–Ω–Ω–æ–µ —Ä–∞–¥–∏–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞ –∫–æ—Ñ–µ?`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é requestAnimationFrame
        requestAnimationFrame(() => {
            modal.classList.remove('hidden');
        });
        
        // Haptic feedback
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
            window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        const backButton = document.getElementById('otherSourceBackButton');
        const confirmButton = document.getElementById('otherSourceConfirmButton');
        const overlay = document.getElementById('otherSourceOverlay');
        const input = document.getElementById('otherSourceInput');
        
        const closeModal = () => {
            modal.classList.add('hidden');
            input.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∏ "–î—Ä—É–≥–æ–µ"
            optionCards.forEach(card => card.classList.remove('selected'));
        };
        
        const showModalError = (errorText) => {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            const existingError = modal.querySelector('.modal-error-message');
            if (existingError) {
                existingError.remove();
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            const errorDiv = document.createElement('div');
            errorDiv.className = 'modal-error-message';
            errorDiv.textContent = errorText;
            errorDiv.style.cssText = `
                color: #ff4444;
                font-size: 14px;
                font-weight: 500;
                text-align: center;
                margin-top: 8px;
                margin-bottom: 16px;
                padding: 8px;
                background: rgba(255, 68, 68, 0.1);
                border-radius: 8px;
                border: 1px solid rgba(255, 68, 68, 0.2);
                animation: errorShake 0.5s ease-in-out;
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —Ç—Ä—è—Å–∫–∏
            if (!document.getElementById('modal-error-styles')) {
                const style = document.createElement('style');
                style.id = 'modal-error-styles';
                style.textContent = `
                    @keyframes errorShake {
                        0%, 100% { transform: translateX(0); }
                        25% { transform: translateX(-5px); }
                        75% { transform: translateX(5px); }
                    }
                `;
                document.head.appendChild(style);
            }
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
            const inputContainer = modal.querySelector('.other-source-input-container');
            inputContainer.parentNode.insertBefore(errorDiv, inputContainer.nextSibling);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                if (errorDiv && errorDiv.parentNode) {
                    errorDiv.remove();
                }
            }, 3000);
            
            // Haptic feedback –¥–ª—è –æ—à–∏–±–∫–∏
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
                window.Telegram.WebApp.HapticFeedback.notificationOccurred('error');
            }
        };

        const handleConfirm = async () => {
            const customSource = input.value.trim();
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞
            if (customSource.length < 2) {
                showModalError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
                return;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ª–æ–∫–∞–ª—å–Ω—ã–º callback –¥–ª—è –æ—à–∏–±–æ–∫
            const isSuccess = await sendSourceToServer(customSource, showModalError);
            
            if (isSuccess) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
                localStorage.setItem('userSourceInfo', `other: ${customSource}`);
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} –≤—ã–±—Ä–∞–ª –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: ${customSource}`);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                closeModal();
                
                // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ "–ü—Ä–∏–Ω—è–ª!"
                setTimeout(() => {
                    showLoadingModal('other');
                }, 300);
                
                // Haptic feedback
                if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
                    window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
                }
            }
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ sendSourceToServer
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å)
        const newBackButton = backButton.cloneNode(true);
        const newConfirmButton = confirmButton.cloneNode(true);
        const newOverlay = overlay.cloneNode(true);
        
        backButton.parentNode.replaceChild(newBackButton, backButton);
        confirmButton.parentNode.replaceChild(newConfirmButton, confirmButton);
        overlay.parentNode.replaceChild(newOverlay, overlay);
        
        newBackButton.addEventListener('click', closeModal);
        newConfirmButton.addEventListener('click', handleConfirm);
        newOverlay.addEventListener('click', closeModal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        input.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                handleConfirm();
            }
        });
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å—Ä–∞–∑—É
        requestAnimationFrame(() => {
            input.focus();
        });
    };

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –≤—ã–±–æ—Ä–∞
     * @param {Event} event - —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
     */
    const handleOptionClick = async (event) => {
        const card = event.currentTarget;
        const option = card.getAttribute('data-option');

        // Haptic feedback –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
            window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
        }

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "–î—Ä—É–≥–æ–µ", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (option === 'other') {
            // –í—ã–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            optionCards.forEach(card => card.classList.remove('selected'));
            card.classList.add('selected');
            
            showOtherSourceModal();
            return;
        }

        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        optionCards.forEach(card => card.classList.remove('selected'));
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        card.classList.add('selected');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ DOM
        const optionTextElement = card.querySelector('.option-text');
        const sourceName = optionTextElement ? optionTextElement.textContent.trim() : option;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const isSuccess = await sendSourceToServer(sourceName);
        
        if (isSuccess) {
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} –≤—ã–±—Ä–∞–ª –∏—Å—Ç–æ—á–Ω–∏–∫: ${sourceName}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ localStorage (–¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            localStorage.setItem('userSourceInfo', sourceName);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            setTimeout(() => {
                showLoadingModal(option);
            }, 200);
        }
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ sendSourceToServer, –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        else {
            card.classList.remove('selected');
        }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–±–æ—Ä–∞
    optionCards.forEach(card => {
        card.addEventListener('click', handleOptionClick);
    });

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ –≤ –±—É–¥—É—â–µ–º)
    if (window.LoadingManager) {
        // –ü–æ–∫–∞ —á—Ç–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        // LoadingManager.preloadPage('../next-page/index.html');
    }
});