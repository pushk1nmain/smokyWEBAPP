document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (window.LoadingManager) {
        LoadingManager.preloadPage('../city-input/index.html');
    }
    const nameInput = document.querySelector('.name-input');
    const nextButton = document.getElementById('nextButton');
    const characterSection = document.querySelector('.character-section');

    const showAlert = (message) => {
        if (window.showErrorModal) {
            window.showErrorModal(message);
        } else if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.showAlert(message);
        } else {
            alert(message); // Fallback
        }
    };

    // --- Keyboard Handling ---
    let initialViewportHeight = window.innerHeight;
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();
        setTimeout(() => { initialViewportHeight = window.innerHeight; }, 100);
    }

    const handleViewportChange = () => {
        if (!characterSection) return;
        const isKeyboardOpen = window.innerHeight < initialViewportHeight - 150;
        characterSection.style.display = isKeyboardOpen ? 'none' : '';
    };

    window.addEventListener('resize', handleViewportChange);
    if (window.Telegram && window.Telegram.WebApp) {
        try {
            window.Telegram.WebApp.onEvent('viewportChanged', handleViewportChange);
        } catch (e) {
            console.log('viewportChanged event not available, using resize fallback.');
        }
    }
    nameInput.addEventListener('focus', () => setTimeout(handleViewportChange, 300));
    nameInput.addEventListener('blur', () => setTimeout(handleViewportChange, 300));

    // --- API Configuration ---
    const config = {
        api: {
            baseUrl: '/api/v1'
        }
    };

    /**
     * –ü—Ä–æ—Å—Ç—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
     */
    const showLoading = () => {
        const loadingOverlay = document.getElementById('loadingOverlay');
        
        if (loadingOverlay) {
            loadingOverlay.classList.remove('hidden');
            
            // –î–æ–±–∞–≤–ª—è–µ–º haptic feedback –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
                window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
            }
        }
    };

    const hideLoading = () => {
        const loadingOverlay = document.getElementById('loadingOverlay');
        if (loadingOverlay) {
            // –ü–ª–∞–≤–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
            setTimeout(() => {
                loadingOverlay.classList.add('hidden');
                
                // Haptic feedback –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
                    window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
                }
            }, 600);
        }
    };
    
    // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    const showLoadingWithText = (text) => {
        showLoading();
    };

    const sendNameToBackend = async (name, telegramId, webAppInitData) => {
        try {
            if (!webAppInitData) {
                showAlert('–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.');
                return false;
            }
            
            const response = await fetch(`${config.api.baseUrl}/name`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-WebApp-Data': webAppInitData
                },
                body: JSON.stringify({
                    telegram_id: telegramId,
                    name: name
                })
            });

            const data = await response.json();

            if (response.ok && data.success) {
                return true; // API call was successful
            } else {
                const errorMessage = data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î.';
                showAlert(`–û—à–∏–±–∫–∞: ${errorMessage}`);
                return false; // API call failed
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–º–µ–Ω–∏ –≤ –ë–î:', error);
            showAlert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î.');
            return false; // Network or other error
        }
    };

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} name - –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
     * @returns {object} - –æ–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
     */
    const validateName = (name) => {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        const trimmedName = name.trim();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if (trimmedName.length < 2) {
            return { isValid: false, error: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤' };
        }
        
        if (trimmedName.length > 20) {
            return { isValid: false, error: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ª–∞—Ç–∏–Ω–∏—Ü–∞, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã)
        const validCharsRegex = /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$/;
        if (!validCharsRegex.test(trimmedName)) {
            return { isValid: false, error: '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        if (/\s{2,}/.test(trimmedName)) {
            return { isValid: false, error: '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–º—è –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–µ—Ñ–∏—Å–æ–º
        if (trimmedName.startsWith('-') || trimmedName.endsWith('-')) {
            return { isValid: false, error: '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–∏—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        if (/\-{2,}/.test(trimmedName)) {
            return { isValid: false, error: '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –¥–µ—Ñ–∏—Å –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if (trimmedName.startsWith(' ') || trimmedName.endsWith(' ')) {
            return { isValid: false, error: '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã' };
        }
        
        // –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–º –∏–ª–∏ –¥–µ—Ñ–∏—Å–æ–º) –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        const capitalizedName = trimmedName
            .split(/(\s+|\-+)/) // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –¥–µ—Ñ–∏—Å–∞–º, —Å–æ—Ö—Ä–∞–Ω—è—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            .map(part => {
                // –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–ø—Ä–æ–±–µ–ª –∏–ª–∏ –¥–µ—Ñ–∏—Å), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                if (/^(\s+|\-+)$/.test(part)) {
                    return part;
                }
                // –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ, –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É
                if (part.length > 0) {
                    return part.charAt(0).toUpperCase() + part.slice(1).toLowerCase();
                }
                return part;
            })
            .join('');
        
        return { isValid: true, cleanedName: capitalizedName };
    };

    nextButton.addEventListener('click', async () => {
        const name = nameInput.value;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        const validation = validateName(name);
        
        if (!validation.isValid) {
            showAlert(validation.error);
            return;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è
        const cleanedName = validation.cleanedName;

        // --- Save name and redirect ---
        localStorage.setItem('userName', cleanedName);

        let telegramId = null;
        let webAppInitData = null;

        if (window.Telegram && window.Telegram.WebApp) {
            webAppInitData = window.Telegram.WebApp.initData;
            if (window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
                telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
            }
        }

        if (telegramId && webAppInitData) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –≤—Ä–µ–º—è API –∑–∞–ø—Ä–æ—Å–∞
            showLoading();
            
            try {
                const isSuccess = await sendNameToBackend(cleanedName, telegramId, webAppInitData);
                
                if (isSuccess) {
                    // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    setTimeout(async () => {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º StepRouter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                        if (window.StepRouter) {
                            console.log('üìà –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —à–∞–≥–∞ 3 (–≥–æ—Ä–æ–¥)');
                            const success = await window.StepRouter.goToNextStep();
                            
                            if (success) {
                                console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ StepRouter');
                                return;
                            } else {
                                console.warn('‚ö†Ô∏è StepRouter –Ω–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                            }
                        }
                        
                        // Fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—è
                        window.location.href = '../city-input/index.html';
                    }, 800);
                } else {
                    hideLoading();
                    localStorage.removeItem('userName');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏:', error);
                hideLoading();
                localStorage.removeItem('userName');
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                nextButton.disabled = false;
                nextButton.classList.remove('loading');
            }
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –¥–ª—è fallback
            console.warn('Telegram data not available. Redirecting in test mode.');
            showLoading();
            setTimeout(async () => {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º StepRouter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                if (window.StepRouter) {
                    console.log('üìà –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —à–∞–≥–∞ 3 (–≥–æ—Ä–æ–¥) - —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º');
                    const success = await window.StepRouter.goToNextStep();
                    
                    if (success) {
                        console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ StepRouter');
                        return;
                    } else {
                        console.warn('‚ö†Ô∏è StepRouter –Ω–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                    }
                }
                
                // Fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—è
                window.location.href = '../city-input/index.html';
            }, 1000);
        }
    });

    nameInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            event.preventDefault();
            nextButton.click();
        }
    });
});
