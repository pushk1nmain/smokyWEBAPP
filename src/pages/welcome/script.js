/**
 * SmokyApp - Welcome Screen JavaScript
 * –°–∫—Ä–∏–ø—Ç —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram WebApp API
 */

(function() {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    let tg = null;
    let isReady = false;

    // --- Telegram WebApp Keyboard Handling ---
    // This is added for consistency, though welcome screen doesn't have direct input issues
    if (window.Telegram && window.Telegram.WebApp) {
        const WebApp = window.Telegram.WebApp;
        const appContainer = document.querySelector('.app-container');

        // Initial setup for viewport
        WebApp.ready();
        WebApp.expand(); // Ensure the app expands to full height

        // Listen for viewport changes (including keyboard appearance/disappearance)
        WebApp.onEvent('viewportChanged', () => {
            const currentViewportHeight = WebApp.viewportHeight;
            const stableViewportHeight = WebApp.viewportStableHeight;

            const keyboardHeight = stableViewportHeight - currentViewportHeight;

            if (appContainer) {
                // Apply padding to the bottom of the app container
                appContainer.style.paddingBottom = `${Math.max(0, keyboardHeight)}px`;
            }
        });
    }

    const config = {
        api: {
            baseUrl: '/api/v1'
        },
        development: {
            enableDebugLogs: true,
            enableBrowserTestMode: true,
            testUser: {
                id: 123456789,
                first_name: '–¢–µ—Å—Ç',
                last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                username: 'testuser',
                language_code: 'ru'
            }
        },
        telegram: {
            enableHapticFeedback: true,
            autoExpand: true,
            applyTheme: true
        },
        ui: {
            loadingAnimationDuration: 500,
            notificationDuration: 3000,
            enableAnimations: true
        }
    };

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
     */
    const showCriticalError = (title, message) => {
        hideLoading();
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: #ffdddd;
            color: #d8000c;
            padding: 10px;
            z-index: 10000;
            font-size: 14px;
            text-align: center;
            border-bottom: 2px solid #d8000c;
            word-break: break-word;
        `;
        errorDiv.innerHTML = `<b>${title}</b><br><small>${message}</small>`;
        document.body.prepend(errorDiv);
    };

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    const main = async () => {
        try {
            console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...');

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –∏ —Å–æ–±—ã—Ç–∏–π
            setupUI();
            setupEventListeners();
            
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
            if (window.LoadingManager) {
                LoadingManager.preloadPage('../name-input/index.html');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∏–ª–∏ —Ä–µ–∂–∏–º–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            if (window.Telegram && window.Telegram.WebApp) {
                tg = window.Telegram.WebApp;
                console.log(`‚úÖ Telegram WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω (v${tg.version}). –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...`);
                await setupTelegramWebApp();
            } else {
                console.warn('‚ö†Ô∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞.');
                await setupBrowserMode();
            }

            isReady = true;
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ SmokyApp —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!');
            hideLoading();

        } catch (error) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:', error);
            showCriticalError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', error.message);
            handleError(error, 'Initialization');
        }
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Telegram
     */
    const setupTelegramWebApp = async () => {
        try {
            console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Telegram...');
            tg.ready();
            if (config.telegram.autoExpand) {
                tg.expand();
            }
            if (config.telegram.applyTheme) {
                applyTelegramTheme();
            }
            setupTelegramButtons();

            console.log('üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram...');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ initDataUnsafe
            console.log('üîç –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram (initDataUnsafe):', tg.initDataUnsafe);

            const user = tg.initDataUnsafe.user;

            if (user && typeof user === 'object') {
                // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                console.log('‚úÖ –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω:', user);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID
                if (!user.id) {
                    throw new Error('–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ `user.id`.');
                }
                
                console.log(`üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ API...`);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º LoadingManager –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
                const apiResult = await (window.LoadingManager ? 
                    LoadingManager.wrapApiCall(
                        () => checkUserInAPI(user.id),
                        '–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å'
                    ) : 
                    (showLoadingWithText('–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...'), await checkUserInAPI(user.id))
                );
                
                console.log('üé® –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
                await personalizeGreeting(user, apiResult);

            } else {
                // –≠—Ç–∞ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –Ω–æ –¥–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: `tg.initDataUnsafe.user` –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Telegram.');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –µ–µ —Å–æ–æ–±—â–∏—Ç—å
            showCriticalError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö', `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. –î–µ—Ç–∞–ª–∏: ${error.message}`);
            // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            handleError(error, 'setupTelegramWebApp');
        }
    };
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ (—Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏)
     */
    const setupBrowserMode = async () => {
        console.log('üåê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞.');
        const testUser = config?.development?.testUser;
        if (!testUser) {
            throw new Error('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (`development.testUser`).');
        }
        
        console.log(`üß™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.first_name}`);
        showLoadingWithText('');
        const apiResult = await checkUserInAPI(testUser.id);
        await personalizeGreeting(testUser, apiResult);
    };

    // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: applyTelegramTheme, setupTelegramButtons, checkUserInAPI, getUserData, personalizeGreeting, setupUI, setupEventListeners, handleStartClick, –∏ —Ç.–¥.)
    // NOTE: I will paste the rest of the functions here to ensure the file is complete.
    
    /**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ç–µ–º–æ–π Telegram
 */
const applyTelegramTheme = () => {
    if (!tg?.themeParams) return;
    
    const theme = tg.themeParams;
    const root = document.documentElement;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
    if (theme.bg_color) {
        root.style.setProperty('--tg-theme-bg-color', theme.bg_color);
    }
    if (theme.text_color) {
        root.style.setProperty('--tg-theme-text-color', theme.text_color);
    }
    if (theme.hint_color) {
        root.style.setProperty('--tg-theme-hint-color', theme.hint_color);
    }
    if (theme.button_color) {
        root.style.setProperty('--tg-theme-button-color', theme.button_color);
    }
    if (theme.button_text_color) {
        root.style.setProperty('--tg-theme-button-text-color', theme.button_text_color);
    }
    if (theme.secondary_bg_color) {
        root.style.setProperty('--tg-theme-secondary-bg-color', theme.secondary_bg_color);
    }
    
    console.log('üé® –¢–µ–º–∞ Telegram –ø—Ä–∏–º–µ–Ω–µ–Ω–∞:', theme);
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ Telegram
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ Telegram WebApp
 */
const setupTelegramButtons = () => {
    if (!tg) return;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    tg.BackButton.hide();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É (–ø–æ–∫–∞ —Å–∫—Ä—ã–≤–∞–µ–º)
    tg.MainButton.hide();
    
    console.log('üîò –ö–Ω–æ–ø–∫–∏ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ backend API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const checkUserInAPI = async (telegramId) => {
    console.log('üîç === –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í API ===');
    console.log('üìä telegramId:', telegramId);
    
    try {
        const apiUrl = `${config.api.baseUrl}/user/${telegramId}`;
        
        console.log('üåê URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞:', apiUrl);
        
        const headers = {
            'Content-Type': 'application/json'
        };

        if (tg && tg.initData) {
            headers['X-Telegram-WebApp-Data'] = tg.initData;
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-WebApp-Data:', tg.initData);
        } else {
            console.warn('‚ö†Ô∏è tg.initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-WebApp-Data –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.');
        }
        
        const response = await fetch(apiUrl, {
            method: 'GET',
            headers: headers
        });
        
        if (response.ok) {
            const userData = await response.json();
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ API:', userData);
            return { found: true, userData };
        } else if (response.status === 404) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API (404)');
            return { found: false, userData: null };
        } else {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', response.status, errorText);
            return { found: false, userData: null, error: `HTTP ${response.status}` };
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:', error);
        return { found: false, userData: null, error: error.message };
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ API
 */
const getUserData = async () => {
    if (!tg?.initDataUnsafe) {
        console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        hideLoading();
        return null;
    }
    
    const user = tg.initDataUnsafe.user;
    
    if (user) {
        showLoadingWithText('–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...');
        const apiResult = await checkUserInAPI(user.id);
        await personalizeGreeting(user, apiResult);
        hideLoading();
        return { telegramUser: user, apiResult };
    }
    
    return null;
};

/**
 * –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
 */
const personalizeGreeting = async (telegramUser, apiResult) => {
    const titleElement = document.querySelector('.welcome-title');
    if (!titleElement) return;

    let userName = localStorage.getItem('userName');

    if (!userName) {
        if (apiResult.found && apiResult.userData?.name) {
            userName = apiResult.userData.name;
        } else if (telegramUser?.first_name) {
            userName = telegramUser.first_name;
        }
    }
    
    if (userName) {
        titleElement.textContent = `–ü—Ä–∏–≤–µ—Ç, ${userName}! –Ø –°–º–æ–∫–∏ ‚Äî –í–∞—à –≥–∏–¥ –∫ –∂–∏–∑–Ω–∏ –±–µ–∑ —Å–∏–≥–∞—Ä–µ—Ç`;
    } else {
        titleElement.textContent = '–ü—Ä–∏–≤–µ—Ç! –Ø –°–º–æ–∫–∏ ‚Äî –í–∞—à –≥–∏–¥ –∫ –∂–∏–∑–Ω–∏ –±–µ–∑ —Å–∏–≥–∞—Ä–µ—Ç';
    }
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
 */
const setupUI = () => {
    const viewport = document.querySelector('meta[name="viewport"]');
    if (viewport) {
        viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover');
    }
    console.log('üé® UI –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
const setupEventListeners = () => {
    const startButton = document.getElementById('startButton');
    if (startButton) {
        startButton.addEventListener('click', handleStartClick);
        startButton.addEventListener('keydown', (e) => (e.key === 'Enter' || e.key === ' ') && handleStartClick());
    }
    console.log('‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å" —Å –ø–ª–∞–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
 */
const handleStartClick = () => {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É—Ç—å —Å –°–º–æ–∫–∏!');
    if (tg?.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('medium');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–ª–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
    showLoading();
    setTimeout(() => {
        navigateToNextScreen();
    }, 1200); // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
};

/**
 * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–∫—Ä–∞–Ω—É
 */
const navigateToNextScreen = () => {
    if (tg?.sendData) {
        try {
            tg.sendData(JSON.stringify({ type: 'welcome_completed', timestamp: new Date().toISOString() }));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω
    window.location.href = '../name-input/index.html';
};

/**
 * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
const showNotification = (message) => {
    if (tg?.showAlert) {
        tg.showAlert(message);
    } else {
        alert(message);
    }
    console.log('üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', message);
};

/**
 * –ü—Ä–æ—Å—Ç—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
 */
const showLoading = () => {
    const loadingOverlay = document.getElementById('loadingOverlay');
    
    if (loadingOverlay) {
        loadingOverlay.classList.remove('hidden');
        
        // –î–æ–±–∞–≤–ª—è–µ–º haptic feedback –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (tg?.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('light');
        }
    }
};

const hideLoading = () => {
    const loadingOverlay = document.getElementById('loadingOverlay');
    if (loadingOverlay) {
        // –ü–ª–∞–≤–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            loadingOverlay.classList.add('hidden');
            
            // Haptic feedback –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            if (tg?.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('success');
            }
        }, 600);
    }
};

// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
const showLoadingWithText = (text) => {
    showLoading();
};

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 */
const handleError = (error, context = 'Unknown') => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${context}:`, error);
    if (tg?.sendData) {
        try {
            tg.sendData(JSON.stringify({ type: 'error', context, error: error.message, timestamp: new Date().toISOString() }));
        } catch (e) { /* ignore */ }
    }
};

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    window.addEventListener('error', (event) => handleError(event.error, 'Global Error'));
    window.addEventListener('unhandledrejection', (event) => handleError(event.reason, 'Unhandled Promise Rejection'));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    document.addEventListener('DOMContentLoaded', main);

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
    window.SmokyWelcome = {
        isReady: () => isReady,
        getTelegram: () => tg,
        getUserData: getUserData,
        showNotification: showNotification,
    };
    
    // Dev Console (pasted from original file)
    class DevConsole {
    constructor() {
        this.logs = [];
        this.maxLogs = 500;
        this.activeFilter = 'all';
        this.startTime = Date.now();
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
        this.consoleElement = null;
        this.contentElement = null;
        this.countElement = null;
        this.filtersElement = null;
        
        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã console
        this.originalConsole = {
            log: console.log,
            info: console.info,
            warn: console.warn,
            error: console.error,
            debug: console.debug,
            trace: console.trace,
            table: console.table,
            group: console.group,
            groupEnd: console.groupEnd
        };
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
     */
    init() {
        const elementsFound = this.findDOMElements();
        if (!elementsFound) {
            return;
        }
        
        this.setupEventListeners();
        this.interceptConsoleMethods();
        this.logToConsole('info', 'üîß –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    /**
     * –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
     */
    findDOMElements() {
        this.consoleElement = document.getElementById('devConsole');
        this.contentElement = document.getElementById('consoleContent');
        this.countElement = document.getElementById('logCount');
        this.filtersElement = document.getElementById('consoleFilters');
        
        if (!this.consoleElement) {
            return false;
        }
        
        return true;
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        const clearBtn = document.getElementById('clearLogs');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => this.clear());
        }
        
        const filterToggleBtn = document.getElementById('filterToggle');
        if (filterToggleBtn) {
            filterToggleBtn.addEventListener('click', () => this.toggleFilters());
        }
        
        const toggleBtn = document.getElementById('toggleDevConsole');
        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => {
                this.consoleElement.classList.toggle('dev-console-hidden');
            });
        }
        
        const filterBtns = document.querySelectorAll('.filter-btn');
        filterBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const filter = btn.dataset.filter;
                this.setFilter(filter);
            });
        });
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–≤–∞—Ç –º–µ—Ç–æ–¥–æ–≤ console
     */
    interceptConsoleMethods() {
        const self = this;
        
        console.log = function(...args) {
            self.originalConsole.log.apply(console, args);
            self.logToConsole('log', ...args);
        };
        
        console.info = function(...args) {
            self.originalConsole.info.apply(console, args);
            self.logToConsole('info', ...args);
        };
        
        console.warn = function(...args) {
            self.originalConsole.warn.apply(console, args);
            self.logToConsole('warn', ...args);
        };
        
        console.error = function(...args) {
            self.originalConsole.error.apply(console, args);
            self.logToConsole('error', ...args);
        };
        
        console.debug = function(...args) {
            self.originalConsole.debug.apply(console, args);
            self.logToConsole('debug', ...args);
        };
        
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
            const url = args[0];
            const options = args[1] || {};
            
            self.logToConsole('api', `üåê API –ó–∞–ø—Ä–æ—Å: ${options.method || 'GET'} ${url}`);
            
            return originalFetch.apply(this, args)
                .then(response => {
                    const status = response.status;
                    const statusText = response.statusText;
                    const logType = status >= 400 ? 'error' : status >= 300 ? 'warn' : 'api';
                    
                    self.logToConsole(logType, `üåê API –û—Ç–≤–µ—Ç: ${status} ${statusText} - ${url}`);
                    return response;
                })
                .catch(error => {
                    self.logToConsole('error', `üåê API –û—à–∏–±–∫–∞: ${error.message} - ${url}`);
                    throw error;
                });
        };
        
        window.addEventListener('error', (event) => {
            self.logToConsole('error', `üí• JavaScript –û—à–∏–±–∫–∞: ${event.message}`, event.filename, `–°—Ç—Ä–æ–∫–∞: ${event.lineno}`);
        });
        
        window.addEventListener('unhandledrejection', (event) => {
            self.logToConsole('error', `üö´ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Promise: ${event.reason}`);
        });
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
     */
    logToConsole(type, ...args) {
        const timestamp = this.getTimestamp();
        const message = this.formatMessage(args);
        
        const logEntry = {
            type,
            timestamp,
            message,
            raw: args
        };
        
        this.logs.push(logEntry);
        
        if (this.logs.length > this.maxLogs) {
            this.logs.shift();
        }
        
        this.renderLog(logEntry);
        this.updateLogCount();
        this.scrollToBottom();
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    formatMessage(args) {
        return args.map(arg => {
            if (typeof arg === 'object') {
                try {
                    return JSON.stringify(arg, null, 2);
                } catch (e) {
                    return String(arg);
                }
            }
            return String(arg);
        }).join(' ');
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
     */
    getTimestamp() {
        const now = new Date();
        const elapsed = now.getTime() - this.startTime;
        const seconds = Math.floor(elapsed / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        
        const h = String(hours).padStart(2, '0');
        const m = String(minutes % 60).padStart(2, '0');
        const s = String(seconds % 60).padStart(2, '0');
        
        return `${h}:${m}:${s}`;
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–æ–≥–∞
     */
    renderLog(logEntry) {
        if (!this.contentElement) return;
        
        const logElement = document.createElement('div');
        logElement.className = `dev-console-log ${logEntry.type} new`;
        logElement.dataset.type = logEntry.type;
        
        const icons = {
            log: 'üìù',
            info: '‚ÑπÔ∏è',
            warn: '‚ö†Ô∏è',
            error: '‚ùå',
            debug: 'üêõ',
            api: 'üåê'
        };
        
        logElement.innerHTML = `
            <span class="log-time">${logEntry.timestamp}</span>
            <span class="log-type">${icons[logEntry.type] || 'üìù'}</span>
            <span class="log-message ${logEntry.type}">${this.escapeHtml(logEntry.message)}</span>
        `;
        
        if (logEntry.raw.some(arg => typeof arg === 'object' && arg !== null)) {
            const objectsDiv = document.createElement('div');
            objectsDiv.className = 'log-object';
            
            const objects = logEntry.raw.filter(arg => typeof arg === 'object' && arg !== null);
            objects.forEach(obj => {
                const pre = document.createElement('pre');
                try {
                    pre.textContent = JSON.stringify(obj, null, 2);
                } catch (e) {
                    pre.textContent = String(obj);
                }
                objectsDiv.appendChild(pre);
            });
            
            logElement.appendChild(objectsDiv);
        }
        
        this.contentElement.appendChild(logElement);
        
        setTimeout(() => {
            logElement.classList.remove('new');
        }, 300);
        
        this.applyFilter();
    }
    
    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ª–æ–≥–æ–≤
     */
    updateLogCount() {
        if (this.countElement) {
            this.countElement.textContent = this.logs.length;
        }
    }
    
    /**
     * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤ –∫–æ–Ω–µ—Ü
     */
    scrollToBottom() {
        if (this.contentElement) {
            setTimeout(() => {
                this.contentElement.scrollTop = this.contentElement.scrollHeight;
            }, 50);
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    setFilter(filter) {
        this.activeFilter = filter;
        
        const filterBtns = document.querySelectorAll('.filter-btn');
        filterBtns.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.filter === filter);
        });
        
        this.applyFilter();
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    applyFilter() {
        if (!this.contentElement) return;
        
        const logs = this.contentElement.querySelectorAll('.dev-console-log:not(.startup)');
        logs.forEach(log => {
            const logType = log.dataset.type;
            const shouldShow = this.activeFilter === 'all' || logType === this.activeFilter;
            log.classList.toggle('hidden', !shouldShow);
        });
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    toggleFilters() {
        if (this.filtersElement) {
            this.filtersElement.classList.toggle('hidden');
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
     */
    clear() {
        this.logs = [];
        if (this.contentElement) {
            const startupLogs = this.contentElement.querySelectorAll('.startup');
            this.contentElement.innerHTML = '';
            startupLogs.forEach(log => this.contentElement.appendChild(log));
        }
        this.updateLogCount();
        this.logToConsole('info', 'üßπ –ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞');
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ console
     */
    restore() {
        Object.keys(this.originalConsole).forEach(method => {
            console[method] = this.originalConsole[method];
        });
    }
}

document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        if (typeof window !== 'undefined') {
            window.devConsole = new DevConsole();
        }
    }, 100);
});

})();