/**
 * SmokyApp - Nicotine Experience Screen JavaScript
 * –°–∫—Ä–∏–ø—Ç —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ —Å—Ç–∞–∂–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–∏–∫–æ—Ç–∏–Ω–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */

(function() {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let tg = null;
    let isReady = false;
    let selectedNicotineType = null;
    let currentExperience = null;

    // --- Telegram WebApp Keyboard Handling ---
    if (window.Telegram && window.Telegram.WebApp) {
        const WebApp = window.Telegram.WebApp;
        const appContainer = document.querySelector('.app-container');

        // Initial setup for viewport
        WebApp.ready();
        WebApp.expand();

        // Listen for viewport changes (including keyboard appearance/disappearance)
        WebApp.onEvent('viewportChanged', () => {
            const currentViewportHeight = WebApp.viewportHeight;
            const stableViewportHeight = WebApp.viewportStableHeight;

            const keyboardHeight = stableViewportHeight - currentViewportHeight;

            if (appContainer) {
                appContainer.style.paddingBottom = `${Math.max(0, keyboardHeight)}px`;
            }
        });
    }

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞–∂–∞ –ø–æ —Ç–∏–ø–∞–º –Ω–∏–∫–æ—Ç–∏–Ω–∞
    const nicotineExperienceConfig = {
        cigarettes: {
            title: '–í–∞—à —Å—Ç–∞–∂ –∫—É—Ä–µ–Ω–∏—è –≤ –≥–æ–¥–∞—Ö?',
            description: '–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã –∫—É—Ä–∏—Ç–µ',
            placeholder: '–õ–µ—Ç –∫—É—Ä–µ–Ω–∏—è',
            icon: 'üö¨',
            action: '–∫—É—Ä–µ–Ω–∏—è'
        },
        vape: {
            title: '–í–∞—à —Å—Ç–∞–∂ –ø–∞—Ä–µ–Ω–∏—è –≤ –≥–æ–¥–∞—Ö?',
            description: '–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã –ø–∞—Ä–∏—Ç–µ—Å—å',
            placeholder: '–õ–µ—Ç –ø–∞—Ä–µ–Ω–∏—è',
            icon: 'üí®',
            action: '–ø–∞—Ä–µ–Ω–∏—è'
        },
        iqos: {
            title: '–í–∞—à —Å—Ç–∞–∂ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è IQOS –≤ –≥–æ–¥–∞—Ö?',
            description: '–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ IQOS',
            placeholder: '–õ–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
            icon: 'üî•',
            action: '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è IQOS'
        },
        hookah: {
            title: '–í–∞—à —Å—Ç–∞–∂ –∫—É—Ä–µ–Ω–∏—è –∫–∞–ª—å—è–Ω–∞ –≤ –≥–æ–¥–∞—Ö?',
            description: '–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –∫—É—Ä–∏—Ç–µ –∫–∞–ª—å—è–Ω',
            placeholder: '–õ–µ—Ç –∫—É—Ä–µ–Ω–∏—è',
            icon: 'ü´ß',
            action: '–∫—É—Ä–µ–Ω–∏—è –∫–∞–ª—å—è–Ω–∞'
        },
        snus: {
            title: '–í–∞—à —Å—Ç–∞–∂ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–Ω—é—Å–∞ –≤ –≥–æ–¥–∞—Ö?',
            description: '–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–Ω—é—Å',
            placeholder: '–õ–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
            icon: 'üèí',
            action: '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–Ω—é—Å–∞'
        }
    };

    const config = {
        api: {
            baseUrl: '/api/v1'
        },
        development: {
            enableDebugLogs: true,
            enableBrowserTestMode: true,
            testUser: {
                id: 123456789,
                first_name: '–¢–µ—Å—Ç',
                last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                username: 'testuser',
                language_code: 'ru'
            }
        },
        telegram: {
            enableHapticFeedback: true,
            autoExpand: true,
            applyTheme: true
        },
        ui: {
            loadingAnimationDuration: 500,
            notificationDuration: 3000,
            enableAnimations: true
        }
    };

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
     */
    const showCriticalError = (title, message) => {
        hideLoading();
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: #ffdddd;
            color: #d8000c;
            padding: 10px;
            z-index: 10000;
            font-size: 14px;
            text-align: center;
            border-bottom: 2px solid #d8000c;
            word-break: break-word;
        `;
        errorDiv.innerHTML = `<b>${title}</b><br><small>${message}</small>`;
        document.body.prepend(errorDiv);
    };

    /**
     * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∏–∫–æ—Ç–∏–Ω–∞
     */
    const updateContentByNicotineType = () => {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç–∞–∂–∞ —Ç–∏–ø–∞ –Ω–∏–∫–æ—Ç–∏–Ω–∞:', selectedNicotineType);

        const config = nicotineExperienceConfig[selectedNicotineType];
        if (!config) {
            console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∏–∫–æ—Ç–∏–Ω–∞:', selectedNicotineType);
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const titleElement = document.getElementById('dynamicTitle');
        if (titleElement) {
            titleElement.textContent = config.title;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        const descriptionElement = document.getElementById('dynamicDescription');
        if (descriptionElement) {
            descriptionElement.textContent = config.description;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º placeholder –∏–Ω–ø—É—Ç–∞
        const inputElement = document.getElementById('experienceInput');
        if (inputElement) {
            inputElement.placeholder = config.placeholder;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
        const iconElement = document.getElementById('nicotineIcon');
        if (iconElement) {
            iconElement.textContent = config.icon;
        }

        console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
            title: config.title,
            icon: config.icon,
            placeholder: config.placeholder
        });
    };

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    const main = async () => {
        try {
            console.log('üöÄ Nicotine experience screen –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–∏–∫–æ—Ç–∏–Ω–∞ –∏–∑ localStorage
            selectedNicotineType = localStorage.getItem('selectedNicotineType');
            
            if (!selectedNicotineType) {
                console.warn('‚ö†Ô∏è –¢–∏–ø –Ω–∏–∫–æ—Ç–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞');
                window.location.href = '../nicotine-selection/index.html';
                return;
            }

            console.log('üìç –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–∏–∫–æ—Ç–∏–Ω–∞:', selectedNicotineType);

            // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –≤ –ë–î –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ nicotine-experience —ç–∫—Ä–∞–Ω–∞
            try {
                if (window.StepRouter) {
                    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –¥–æ 14 (nicotine-experience) —á–µ—Ä–µ–∑ StepRouter');
                    const success = await window.StepRouter.updateStep(14);
                    if (success) {
                        console.log('‚úÖ –®–∞–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 14');
                    } else {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–≥ –¥–æ 14');
                    }
                } else {
                    console.warn('‚ö†Ô∏è StepRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–≥–∞ –Ω–∞ nicotine-experience —ç–∫—Ä–∞–Ω–µ');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞ –Ω–∞ nicotine-experience —ç–∫—Ä–∞–Ω–µ:', error);
            }

            // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SmokyApp –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.SmokyApp) {
                console.log('üîß SmokyApp —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–∂–∏–¥–∞–µ–º—Å—è –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
                let waitCount = 0;
                while (!window.SmokyApp.isInitialized && waitCount < 50) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                    waitCount++;
                }
                
                if (window.SmokyApp.isInitialized) {
                    console.log('‚úÖ SmokyApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é...');
                    
                    // –ü–æ–∑–≤–æ–ª—è–µ–º SmokyApp –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                    if (window.StepRouter) {
                        const currentStep = await window.StepRouter.getCurrentStep();
                        console.log(`üìç –¢–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentStep}`);
                        
                        if (currentStep > 14) {
                            console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —à–∞–≥–µ –±–æ–ª—å—à–µ 14, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ StepRouter');
                            await window.StepRouter.navigateToCurrentStep(true);
                            return;
                        }
                    }
                } else {
                    console.warn('‚ö†Ô∏è SmokyApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥');
                }
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –∏ —Å–æ–±—ã—Ç–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ nicotine-experience screen
            updateContentByNicotineType();
            setupUI();
            setupEventListeners();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∏–ª–∏ —Ä–µ–∂–∏–º–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            if (window.Telegram && window.Telegram.WebApp) {
                tg = window.Telegram.WebApp;
                console.log(`‚úÖ Telegram WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω (v${tg.version}). –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...`);
                await setupTelegramWebApp();
            } else {
                console.warn('‚ö†Ô∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞.');
                await setupBrowserMode();
            }

            isReady = true;
            console.log('‚úÖ Nicotine experience screen —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
            hideLoading();

        } catch (error) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:', error);
            showCriticalError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', error.message);
            handleError(error, 'Initialization');
        }
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Telegram
     */
    const setupTelegramWebApp = async () => {
        try {
            console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Telegram...');
            tg.ready();
            if (config.telegram.autoExpand) {
                tg.expand();
            }
            if (config.telegram.applyTheme) {
                applyTelegramTheme();
            }
            setupTelegramButtons();

            console.log('üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram...');
            
            const user = tg.initDataUnsafe?.user;

            if (user && typeof user === 'object') {
                console.log('‚úÖ –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω:', user);

                if (!user.id) {
                    throw new Error('–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ `user.id`.');
                }
                
                console.log(`üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}. Nicotine experience screen –∑–∞–≥—Ä—É–∂–µ–Ω.`);

            } else {
                console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: `tg.initDataUnsafe.user` –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Telegram.');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            showCriticalError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö', `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Telegram. –î–µ—Ç–∞–ª–∏: ${error.message}`);
            handleError(error, 'setupTelegramWebApp');
        }
    };
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ (—Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏)
     */
    const setupBrowserMode = async () => {
        console.log('üåê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞.');
        const testUser = config?.development?.testUser;
        if (!testUser) {
            throw new Error('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (`development.testUser`).');
        }
        
        console.log(`üß™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.first_name}`);
        console.log('‚úÖ Nicotine experience screen –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞');
    };

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
     */
    const applyTelegramTheme = () => {
        if (!tg?.themeParams) return;
        
        const theme = tg.themeParams;
        const root = document.documentElement;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
        if (theme.bg_color) {
            root.style.setProperty('--tg-theme-bg-color', theme.bg_color);
        }
        if (theme.text_color) {
            root.style.setProperty('--tg-theme-text-color', theme.text_color);
        }
        if (theme.hint_color) {
            root.style.setProperty('--tg-theme-hint-color', theme.hint_color);
        }
        if (theme.button_color) {
            root.style.setProperty('--tg-theme-button-color', theme.button_color);
        }
        if (theme.button_text_color) {
            root.style.setProperty('--tg-theme-button-text-color', theme.button_text_color);
        }
        if (theme.secondary_bg_color) {
            root.style.setProperty('--tg-theme-secondary-bg-color', theme.secondary_bg_color);
        }
        
        console.log('üé® –¢–µ–º–∞ Telegram –ø—Ä–∏–º–µ–Ω–µ–Ω–∞:', theme);
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ Telegram
     */
    const setupTelegramButtons = () => {
        if (!tg) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å—Ç–∞–∂–∞ –Ω–∏–∫–æ—Ç–∏–Ω–∞
        tg.BackButton.show();
        tg.BackButton.onClick(() => {
            goBack();
        });
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É (–ø–æ–∫–∞ —Å–∫—Ä—ã–≤–∞–µ–º)
        tg.MainButton.hide();
        
        console.log('üîò –ö–Ω–æ–ø–∫–∏ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
     */
    const setupUI = () => {
        const viewport = document.querySelector('meta[name="viewport"]');
        if (viewport) {
            viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover');
        }
        console.log('üé® UI –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    };

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    const setupEventListeners = () => {
        const experienceInput = document.getElementById('experienceInput');
        const backButton = document.getElementById('backButton');
        const forwardButton = document.getElementById('forwardButton');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–∂–∞
        if (experienceInput) {
            experienceInput.addEventListener('input', (e) => {
                let value = e.target.value;
                
                // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
                value = value.replace(/[^0-9]/g, '');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                e.target.value = value;
                
                currentExperience = value ? parseInt(value) : null;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä–µ–¥
                updateForwardButtonState();
                
                console.log('‚è∞ –í–≤–µ–¥–µ–Ω —Å—Ç–∞–∂:', currentExperience);
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
            experienceInput.addEventListener('paste', (e) => {
                e.preventDefault();
                let paste = (e.clipboardData || window.clipboardData).getData('text');
                
                // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
                paste = paste.replace(/[^0-9]/g, '');
                
                if (paste) {
                    experienceInput.value = paste;
                    
                    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ input –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    experienceInput.dispatchEvent(new Event('input'));
                }
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            experienceInput.addEventListener('keydown', (e) => {
                // –†–∞–∑—Ä–µ—à–∞–µ–º: —Ü–∏—Ñ—Ä—ã, Backspace, Delete, Tab, Escape, Enter, —Å—Ç—Ä–µ–ª–∫–∏
                if ([46, 8, 9, 27, 13].indexOf(e.keyCode) !== -1 ||
                    // –†–∞–∑—Ä–µ—à–∞–µ–º Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
                    (e.keyCode === 65 && e.ctrlKey === true) ||
                    (e.keyCode === 67 && e.ctrlKey === true) ||
                    (e.keyCode === 86 && e.ctrlKey === true) ||
                    (e.keyCode === 88 && e.ctrlKey === true) ||
                    // –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç—Ä–µ–ª–∫–∏
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        if (currentExperience && currentExperience >= 1 && currentExperience <= 80) {
                            goForward();
                        }
                    }
                    return;
                }
                
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        if (backButton) {
            backButton.addEventListener('click', goBack);
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä–µ–¥
        if (forwardButton) {
            forwardButton.addEventListener('click', () => {
                if (currentExperience && currentExperience >= 1 && currentExperience <= 80) {
                    goForward();
                }
            });
        }
        
        console.log('‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç–∞–∂–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    };

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥"
     */
    const updateForwardButtonState = () => {
        const forwardButton = document.getElementById('forwardButton');
        if (!forwardButton) return;

        const isValid = currentExperience && currentExperience >= 1 && currentExperience <= 80;
        
        if (isValid) {
            forwardButton.classList.add('active');
            forwardButton.removeAttribute('disabled');
        } else {
            forwardButton.classList.remove('active');
            forwardButton.setAttribute('disabled', 'true');
        }
    };

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥
     */
    const goBack = () => {
        console.log('‚¨ÖÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥ –∫ —ç–∫—Ä–∞–Ω—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∏–∫–æ—Ç–∏–Ω–∞');
        
        if (tg?.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('light');
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º LoadingManager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.LoadingManager?.navigateWithTransition) {
            window.LoadingManager.navigateWithTransition('../nicotine-cost/index.html');
        } else {
            window.location.href = '../nicotine-cost/index.html';
        }
    };

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä–µ–¥
     */
    const goForward = () => {
        if (!currentExperience || currentExperience < 1 || currentExperience > 80) {
            return;
        }

        console.log('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä–µ–¥ —Å–æ —Å—Ç–∞–∂–µ–º:', currentExperience);
        
        if (tg?.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('medium');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–∂ –Ω–∏–∫–æ—Ç–∏–Ω–∞
        if (typeof(Storage) !== "undefined") {
            localStorage.setItem('nicotineExperience', currentExperience);
            localStorage.setItem('nicotineExperienceAction', nicotineExperienceConfig[selectedNicotineType]?.action || '–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è');
            console.log(`üíæ –°—Ç–∞–∂ "${currentExperience}" –ª–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage`);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (tg?.sendData) {
            try {
                tg.sendData(JSON.stringify({ 
                    type: 'nicotine_experience_completed', 
                    nicotine_type: selectedNicotineType,
                    experience: currentExperience,
                    action: nicotineExperienceConfig[selectedNicotineType]?.action,
                    timestamp: new Date().toISOString() 
                }));
                console.log('üì§ –î–∞–Ω–Ω—ã–µ —Å—Ç–∞–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∂–∞:', error);
            }
        }

        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω (–ø–æ–∫–∞ –Ω–∞ welcome –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        window.location.href = '../welcome/index.html';
    };

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    const showNotification = (message) => {
        if (tg?.showAlert) {
            tg.showAlert(message);
        } else {
            alert(message);
        }
        console.log('üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', message);
    };

    /**
     * –ü—Ä–æ—Å—Ç—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
     */
    const showLoading = () => {
        const loadingOverlay = document.getElementById('loadingOverlay');
        
        if (loadingOverlay) {
            loadingOverlay.classList.remove('hidden');
            
            if (tg?.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
            }
        }
    };

    const hideLoading = () => {
        const loadingOverlay = document.getElementById('loadingOverlay');
        if (loadingOverlay) {
            setTimeout(() => {
                loadingOverlay.classList.add('hidden');
                
                if (tg?.HapticFeedback) {
                    tg.HapticFeedback.notificationOccurred('success');
                }
            }, 600);
        }
    };

    /**
     * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
     */
    const handleError = (error, context = 'Unknown') => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${context}:`, error);
        if (tg?.sendData) {
            try {
                tg.sendData(JSON.stringify({ type: 'error', context, error: error.message, timestamp: new Date().toISOString() }));
            } catch (e) { /* ignore */ }
        }
    };

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    window.addEventListener('error', (event) => handleError(event.error, 'Global Error'));
    window.addEventListener('unhandledrejection', (event) => handleError(event.reason, 'Unhandled Promise Rejection'));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    document.addEventListener('DOMContentLoaded', main);

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
    window.SmokyNicotineExperience = {
        isReady: () => isReady,
        getTelegram: () => tg,
        showNotification: showNotification,
        getSelectedNicotineType: () => selectedNicotineType,
        getCurrentExperience: () => currentExperience,
        goBack: goBack,
        goForward: goForward
    };

})();