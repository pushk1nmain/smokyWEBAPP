/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Smoky WebApp Backend
 * –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
const getApiBaseUrl = () => {
    if (window.SmokyConfig && window.SmokyConfig.api && window.SmokyConfig.api.baseUrl) {
        return window.SmokyConfig.api.baseUrl;
    }
    // Fallback –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    return '/api/v1';
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Telegram WebApp –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @returns {string} —Å—Ç—Ä–æ–∫–∞ initData –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-WebApp-Data
 */
const getTelegramWebAppData = () => {
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initData) {
        return window.Telegram.WebApp.initData;
    }
    // Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    return 'query_id=dev&user=%7B%22id%22%3A123456789%2C%22first_name%22%3A%22Dev%22%7D&auth_date=1678886400&hash=dev';
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
 * @returns {number} telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const getTelegramUserId = () => {
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
        return window.Telegram.WebApp.initDataUnsafe.user.id;
    }
    // Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    return 123456789;
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
 * @param {string} endpoint - endpoint –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '/api/v1/source')
 * @param {Object} options - –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 * @param {string} options.method - HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
 * @param {Object} options.body - —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–±—É–¥–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ JSON)
 * @param {Object} options.headers - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
 * @returns {Promise<Object>} —Ä–µ–∑—É–ª—å—Ç–∞—Ç API –∑–∞–ø—Ä–æ—Å–∞
 */
const apiRequest = async (endpoint, options = {}) => {
    const {
        method = 'GET',
        body = null,
        headers = {}
    } = options;

    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        const requestHeaders = {
            'Content-Type': 'application/json',
            'X-Telegram-WebApp-Data': getTelegramWebAppData(),
            ...headers
        };

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        const requestConfig = {
            method,
            headers: requestHeaders
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (body && method !== 'GET') {
            requestConfig.body = JSON.stringify(body);
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:`, body);
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        const response = await fetch(`${getApiBaseUrl()}${endpoint}`, requestConfig);

        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        const data = await response.json();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if (!response.ok) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ API:`, data);
            throw new APIError(data.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', response.status, data.error_code);
        }

        console.log(`üì• –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç:`, data);
        return data;
    } catch (error) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        if (error instanceof APIError) {
            throw error;
        } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
            throw new APIError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 0, 'NETWORK_ERROR');
        } else if (error.name === 'SyntaxError') {
            throw new APIError('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç', 0, 'PARSE_ERROR');
        } else {
            throw new APIError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ' + error.message, 0, 'UNKNOWN_ERROR');
        }
    }
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è API –æ—à–∏–±–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
class APIError extends Error {
    constructor(message, statusCode = 0, errorCode = null) {
        super(message);
        this.name = 'APIError';
        this.statusCode = statusCode;
        this.errorCode = errorCode;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     * @returns {string} —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    getUserMessage() {
        switch (this.errorCode) {
            case 'CITY_NOT_FOUND':
                return '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.';
            case 'EXTERNAL_SERVICE_ERROR':
                return '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            case 'DATABASE_ERROR':
                return '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
            case 'USER_NOT_FOUND':
                return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
            case 'VALIDATION_ERROR':
                return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.';
            case 'NETWORK_ERROR':
                return '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.';
            case 'PARSE_ERROR':
                return '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞.';
            default:
                return this.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.';
        }
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} source - –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "tiktok", "youtube", "—Ä–µ–∫–ª–∞–º–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ")
 * @returns {Promise<Object>} —Ä–µ–∑—É–ª—å—Ç–∞—Ç API –∑–∞–ø—Ä–æ—Å–∞
 */
const sendUserSource = async (source) => {
    const telegram_id = getTelegramUserId();
    
    return await apiRequest('/source', {
        method: 'POST',
        body: {
            telegram_id,
            source
        }
    });
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} telegram_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @returns {Promise<Array>} –º–∞—Å—Å–∏–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è
 */
const getUserSources = async (telegram_id) => {
    return await apiRequest(`/source/${telegram_id}`);
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ä–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenWeather API
 * @param {string} town - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 * @returns {Promise<Object>} –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ
 */
const checkTown = async (town) => {
    return await apiRequest('/check_town', {
        method: 'POST',
        body: { town }
    });
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} name - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} —Ä–µ–∑—É–ª—å—Ç–∞—Ç API –∑–∞–ø—Ä–æ—Å–∞
 */
const updateUserName = async (name) => {
    const telegram_id = getTelegramUserId();
    
    return await apiRequest('/name', {
        method: 'POST',
        body: {
            telegram_id,
            name
        }
    });
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≥–æ—Ä–æ–¥ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} town - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 * @param {number} tz_offset - —Å–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
 * @returns {Promise<Object>} —Ä–µ–∑—É–ª—å—Ç–∞—Ç API –∑–∞–ø—Ä–æ—Å–∞
 */
const updateUserTown = async (town, tz_offset) => {
    const telegram_id = getTelegramUserId();
    
    return await apiRequest('/town', {
        method: 'POST',
        body: {
            telegram_id,
            town,
            tz_offset
        }
    });
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} telegram_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä–µ—Ç—Å—è –∏–∑ Telegram WebApp)
 * @param {number} progress_step - —à–∞–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 * @returns {Promise<Object>} —Ä–µ–∑—É–ª—å—Ç–∞—Ç API –∑–∞–ø—Ä–æ—Å–∞
 */
const updateProgressStep = async (telegram_id_param, progress_step) => {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–æ —ç—Ç–æ progress_step, –∞ telegram_id –±–µ—Ä–µ–º –∏–∑ WebApp
    let telegram_id, step;
    
    if (arguments.length === 1) {
        telegram_id = getTelegramUserId();
        step = telegram_id_param;
    } else {
        telegram_id = telegram_id_param;
        step = progress_step;
    }
    
    return await apiRequest('/progress_step', {
        method: 'POST',
        body: {
            telegram_id,
            progress_step: step
        }
    });
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * @param {number} telegram_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä–µ—Ç—Å—è –∏–∑ Telegram WebApp)
 * @returns {Promise<Object>} –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
const getUserInfo = async (telegram_id) => {
    const userId = telegram_id || getTelegramUserId();
    return await apiRequest(`/user/${userId}`);
};

/**
 * –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è getUserInfo –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ StepRouter
 * @param {number} telegram_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<Object>} –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
const getUser = async (telegram_id) => {
    return await getUserInfo(telegram_id);
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        apiRequest,
        APIError,
        sendUserSource,
        getUserSources,
        checkTown,
        updateUserName,
        updateUserTown,
        updateProgressStep,
        getUserInfo,
        getUser,
        getTelegramUserId,
        getTelegramWebAppData
    };
} else {
    // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.APIClient = {
        apiRequest,
        APIError,
        sendUserSource,
        getUserSources,
        checkTown,
        updateUserName,
        updateUserTown,
        updateProgressStep,
        getUserInfo,
        getUser,
        getTelegramUserId,
        getTelegramWebAppData
    };
}